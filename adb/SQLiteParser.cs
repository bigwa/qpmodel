//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\q00904479\Desktop\adb\adb\SQLite.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace adb {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SQLiteParser : Parser {
	public const int
		T__0=1, SCOL=2, DOT=3, OPEN_PAR=4, CLOSE_PAR=5, COMMA=6, ASSIGN=7, STAR=8, 
		PLUS=9, MINUS=10, TILDE=11, PIPE2=12, DIV=13, MOD=14, LT2=15, GT2=16, 
		AMP=17, PIPE=18, LT=19, LT_EQ=20, GT=21, GT_EQ=22, EQ=23, NOT_EQ1=24, 
		NOT_EQ2=25, K_ABORT=26, K_ACTION=27, K_ADD=28, K_AFTER=29, K_ALL=30, K_ALTER=31, 
		K_ANALYZE=32, K_AND=33, K_AS=34, K_ASC=35, K_ATTACH=36, K_AUTOINCREMENT=37, 
		K_BEFORE=38, K_BEGIN=39, K_BETWEEN=40, K_BY=41, K_CASCADE=42, K_CASE=43, 
		K_CAST=44, K_CHECK=45, K_COLLATE=46, K_COLUMN=47, K_COMMIT=48, K_CONFLICT=49, 
		K_CONSTRAINT=50, K_CREATE=51, K_CROSS=52, K_CURRENT_DATE=53, K_CURRENT_TIME=54, 
		K_CURRENT_TIMESTAMP=55, K_DATABASE=56, K_DEFAULT=57, K_DEFERRABLE=58, 
		K_DEFERRED=59, K_DELETE=60, K_DESC=61, K_DETACH=62, K_DISTINCT=63, K_DROP=64, 
		K_EACH=65, K_ELSE=66, K_END=67, K_ESCAPE=68, K_EXCEPT=69, K_EXCLUSIVE=70, 
		K_EXISTS=71, K_EXPLAIN=72, K_FAIL=73, K_FOR=74, K_FOREIGN=75, K_FROM=76, 
		K_FULL=77, K_GLOB=78, K_GROUP=79, K_HAVING=80, K_IF=81, K_IGNORE=82, K_IMMEDIATE=83, 
		K_IN=84, K_INDEX=85, K_INDEXED=86, K_INITIALLY=87, K_INNER=88, K_INSERT=89, 
		K_INSTEAD=90, K_INTERSECT=91, K_INTO=92, K_IS=93, K_ISNULL=94, K_JOIN=95, 
		K_KEY=96, K_LEFT=97, K_LIKE=98, K_LIMIT=99, K_MATCH=100, K_NATURAL=101, 
		K_NO=102, K_NOT=103, K_NOTNULL=104, K_NULL=105, K_OF=106, K_OFFSET=107, 
		K_ON=108, K_OR=109, K_ORDER=110, K_OUTER=111, K_PLAN=112, K_PRAGMA=113, 
		K_PRIMARY=114, K_QUERY=115, K_RAISE=116, K_RECURSIVE=117, K_REFERENCES=118, 
		K_REGEXP=119, K_REINDEX=120, K_RELEASE=121, K_RENAME=122, K_REPLACE=123, 
		K_RESTRICT=124, K_RIGHT=125, K_ROLLBACK=126, K_ROW=127, K_SAVEPOINT=128, 
		K_SELECT=129, K_SET=130, K_TABLE=131, K_TEMP=132, K_TEMPORARY=133, K_THEN=134, 
		K_TO=135, K_TRANSACTION=136, K_TRIGGER=137, K_UNION=138, K_UNIQUE=139, 
		K_UPDATE=140, K_USING=141, K_VACUUM=142, K_VALUES=143, K_VIEW=144, K_VIRTUAL=145, 
		K_WHEN=146, K_WHERE=147, K_WITH=148, K_WITHOUT=149, IDENTIFIER=150, NUMERIC_LITERAL=151, 
		BIND_PARAMETER=152, STRING_LITERAL=153, BLOB_LITERAL=154, SINGLE_LINE_COMMENT=155, 
		MULTILINE_COMMENT=156, SPACES=157, UNEXPECTED_CHAR=158;
	public const int
		RULE_parse = 0, RULE_error = 1, RULE_sql_stmt_list = 2, RULE_sql_stmt = 3, 
		RULE_alter_table_stmt = 4, RULE_analyze_stmt = 5, RULE_attach_stmt = 6, 
		RULE_begin_stmt = 7, RULE_commit_stmt = 8, RULE_compound_select_stmt = 9, 
		RULE_create_index_stmt = 10, RULE_create_table_stmt = 11, RULE_create_trigger_stmt = 12, 
		RULE_create_view_stmt = 13, RULE_create_virtual_table_stmt = 14, RULE_delete_stmt = 15, 
		RULE_delete_stmt_limited = 16, RULE_detach_stmt = 17, RULE_drop_index_stmt = 18, 
		RULE_drop_table_stmt = 19, RULE_drop_trigger_stmt = 20, RULE_drop_view_stmt = 21, 
		RULE_factored_select_stmt = 22, RULE_insert_stmt = 23, RULE_pragma_stmt = 24, 
		RULE_reindex_stmt = 25, RULE_release_stmt = 26, RULE_rollback_stmt = 27, 
		RULE_savepoint_stmt = 28, RULE_simple_select_stmt = 29, RULE_select_stmt = 30, 
		RULE_select_or_values = 31, RULE_update_stmt = 32, RULE_update_stmt_limited = 33, 
		RULE_vacuum_stmt = 34, RULE_column_def = 35, RULE_type_name = 36, RULE_column_constraint = 37, 
		RULE_conflict_clause = 38, RULE_expr = 39, RULE_foreign_key_clause = 40, 
		RULE_raise_function = 41, RULE_indexed_column = 42, RULE_table_constraint = 43, 
		RULE_with_clause = 44, RULE_qualified_table_name = 45, RULE_ordering_term = 46, 
		RULE_pragma_value = 47, RULE_common_table_expression = 48, RULE_result_column = 49, 
		RULE_table_or_subquery = 50, RULE_join_clause = 51, RULE_join_operator = 52, 
		RULE_join_constraint = 53, RULE_select_core = 54, RULE_compound_operator = 55, 
		RULE_cte_table_name = 56, RULE_signed_number = 57, RULE_literal_value = 58, 
		RULE_unary_operator = 59, RULE_error_message = 60, RULE_module_argument = 61, 
		RULE_column_alias = 62, RULE_keyword = 63, RULE_name = 64, RULE_function_name = 65, 
		RULE_database_name = 66, RULE_table_name = 67, RULE_table_or_index_name = 68, 
		RULE_new_table_name = 69, RULE_column_name = 70, RULE_collation_name = 71, 
		RULE_foreign_table = 72, RULE_index_name = 73, RULE_trigger_name = 74, 
		RULE_view_name = 75, RULE_module_name = 76, RULE_pragma_name = 77, RULE_savepoint_name = 78, 
		RULE_table_alias = 79, RULE_transaction_name = 80, RULE_any_name = 81;
	public static readonly string[] ruleNames = {
		"parse", "error", "sql_stmt_list", "sql_stmt", "alter_table_stmt", "analyze_stmt", 
		"attach_stmt", "begin_stmt", "commit_stmt", "compound_select_stmt", "create_index_stmt", 
		"create_table_stmt", "create_trigger_stmt", "create_view_stmt", "create_virtual_table_stmt", 
		"delete_stmt", "delete_stmt_limited", "detach_stmt", "drop_index_stmt", 
		"drop_table_stmt", "drop_trigger_stmt", "drop_view_stmt", "factored_select_stmt", 
		"insert_stmt", "pragma_stmt", "reindex_stmt", "release_stmt", "rollback_stmt", 
		"savepoint_stmt", "simple_select_stmt", "select_stmt", "select_or_values", 
		"update_stmt", "update_stmt_limited", "vacuum_stmt", "column_def", "type_name", 
		"column_constraint", "conflict_clause", "expr", "foreign_key_clause", 
		"raise_function", "indexed_column", "table_constraint", "with_clause", 
		"qualified_table_name", "ordering_term", "pragma_value", "common_table_expression", 
		"result_column", "table_or_subquery", "join_clause", "join_operator", 
		"join_constraint", "select_core", "compound_operator", "cte_table_name", 
		"signed_number", "literal_value", "unary_operator", "error_message", "module_argument", 
		"column_alias", "keyword", "name", "function_name", "database_name", "table_name", 
		"table_or_index_name", "new_table_name", "column_name", "collation_name", 
		"foreign_table", "index_name", "trigger_name", "view_name", "module_name", 
		"pragma_name", "savepoint_name", "table_alias", "transaction_name", "any_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'is not'", "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", 
		"'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", 
		"'<='", "'>'", "'>='", "'=='", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", 
		"STAR", "PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", 
		"AMP", "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
		"K_ABORT", "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", 
		"K_AND", "K_AS", "K_ASC", "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
		"K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", "K_COLLATE", 
		"K_COLUMN", "K_COMMIT", "K_CONFLICT", "K_CONSTRAINT", "K_CREATE", "K_CROSS", 
		"K_CURRENT_DATE", "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
		"K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", "K_DESC", "K_DETACH", 
		"K_DISTINCT", "K_DROP", "K_EACH", "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", 
		"K_EXCLUSIVE", "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
		"K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", 
		"K_IMMEDIATE", "K_IN", "K_INDEX", "K_INDEXED", "K_INITIALLY", "K_INNER", 
		"K_INSERT", "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
		"K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", "K_MATCH", "K_NATURAL", 
		"K_NO", "K_NOT", "K_NOTNULL", "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", 
		"K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", "K_RAISE", 
		"K_RECURSIVE", "K_REFERENCES", "K_REGEXP", "K_REINDEX", "K_RELEASE", "K_RENAME", 
		"K_REPLACE", "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
		"K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", "K_THEN", "K_TO", 
		"K_TRANSACTION", "K_TRIGGER", "K_UNION", "K_UNIQUE", "K_UPDATE", "K_USING", 
		"K_VACUUM", "K_VALUES", "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
		"K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
		"BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQLite.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SQLiteParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SQLiteParser.Eof, 0); }
		public Sql_stmt_listContext[] sql_stmt_list() {
			return GetRuleContexts<Sql_stmt_listContext>();
		}
		public Sql_stmt_listContext sql_stmt_list(int i) {
			return GetRuleContext<Sql_stmt_listContext>(i);
		}
		public ErrorContext[] error() {
			return GetRuleContexts<ErrorContext>();
		}
		public ErrorContext error(int i) {
			return GetRuleContext<ErrorContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCOL) | (1L << K_ALTER) | (1L << K_ANALYZE) | (1L << K_ATTACH) | (1L << K_BEGIN) | (1L << K_COMMIT) | (1L << K_CREATE) | (1L << K_DELETE) | (1L << K_DETACH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_DROP - 64)) | (1L << (K_END - 64)) | (1L << (K_EXPLAIN - 64)) | (1L << (K_INSERT - 64)) | (1L << (K_PRAGMA - 64)) | (1L << (K_REINDEX - 64)) | (1L << (K_RELEASE - 64)) | (1L << (K_REPLACE - 64)) | (1L << (K_ROLLBACK - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (K_SAVEPOINT - 128)) | (1L << (K_SELECT - 128)) | (1L << (K_UPDATE - 128)) | (1L << (K_VACUUM - 128)) | (1L << (K_VALUES - 128)) | (1L << (K_WITH - 128)) | (1L << (UNEXPECTED_CHAR - 128)))) != 0)) {
				{
				State = 166;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case SCOL:
				case K_ALTER:
				case K_ANALYZE:
				case K_ATTACH:
				case K_BEGIN:
				case K_COMMIT:
				case K_CREATE:
				case K_DELETE:
				case K_DETACH:
				case K_DROP:
				case K_END:
				case K_EXPLAIN:
				case K_INSERT:
				case K_PRAGMA:
				case K_REINDEX:
				case K_RELEASE:
				case K_REPLACE:
				case K_ROLLBACK:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_UPDATE:
				case K_VACUUM:
				case K_VALUES:
				case K_WITH:
					{
					State = 164; sql_stmt_list();
					}
					break;
				case UNEXPECTED_CHAR:
					{
					State = 165; error();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 170;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 171; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public IToken _UNEXPECTED_CHAR;
		public ITerminalNode UNEXPECTED_CHAR() { return GetToken(SQLiteParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; _localctx._UNEXPECTED_CHAR = Match(UNEXPECTED_CHAR);
			 
			     throw new RuntimeException("UNEXPECTED_CHAR=" + (_localctx._UNEXPECTED_CHAR!=null?_localctx._UNEXPECTED_CHAR.Text:null)); 
			   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SCOL) {
				{
				{
				State = 176; Match(SCOL);
				}
				}
				State = 181;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 182; sql_stmt();
			State = 191;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 184;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 183; Match(SCOL);
						}
						}
						State = 186;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==SCOL );
					State = 188; sql_stmt();
					}
					} 
				}
				State = 193;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 197;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 194; Match(SCOL);
					}
					} 
				}
				State = 199;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		public Analyze_stmtContext analyze_stmt() {
			return GetRuleContext<Analyze_stmtContext>(0);
		}
		public Attach_stmtContext attach_stmt() {
			return GetRuleContext<Attach_stmtContext>(0);
		}
		public Begin_stmtContext begin_stmt() {
			return GetRuleContext<Begin_stmtContext>(0);
		}
		public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		public Compound_select_stmtContext compound_select_stmt() {
			return GetRuleContext<Compound_select_stmtContext>(0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return GetRuleContext<Create_index_stmtContext>(0);
		}
		public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		public Create_trigger_stmtContext create_trigger_stmt() {
			return GetRuleContext<Create_trigger_stmtContext>(0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		public Create_virtual_table_stmtContext create_virtual_table_stmt() {
			return GetRuleContext<Create_virtual_table_stmtContext>(0);
		}
		public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		public Delete_stmt_limitedContext delete_stmt_limited() {
			return GetRuleContext<Delete_stmt_limitedContext>(0);
		}
		public Detach_stmtContext detach_stmt() {
			return GetRuleContext<Detach_stmtContext>(0);
		}
		public Drop_index_stmtContext drop_index_stmt() {
			return GetRuleContext<Drop_index_stmtContext>(0);
		}
		public Drop_table_stmtContext drop_table_stmt() {
			return GetRuleContext<Drop_table_stmtContext>(0);
		}
		public Drop_trigger_stmtContext drop_trigger_stmt() {
			return GetRuleContext<Drop_trigger_stmtContext>(0);
		}
		public Drop_view_stmtContext drop_view_stmt() {
			return GetRuleContext<Drop_view_stmtContext>(0);
		}
		public Factored_select_stmtContext factored_select_stmt() {
			return GetRuleContext<Factored_select_stmtContext>(0);
		}
		public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		public Pragma_stmtContext pragma_stmt() {
			return GetRuleContext<Pragma_stmtContext>(0);
		}
		public Reindex_stmtContext reindex_stmt() {
			return GetRuleContext<Reindex_stmtContext>(0);
		}
		public Release_stmtContext release_stmt() {
			return GetRuleContext<Release_stmtContext>(0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		public Savepoint_stmtContext savepoint_stmt() {
			return GetRuleContext<Savepoint_stmtContext>(0);
		}
		public Simple_select_stmtContext simple_select_stmt() {
			return GetRuleContext<Simple_select_stmtContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		public Update_stmt_limitedContext update_stmt_limited() {
			return GetRuleContext<Update_stmt_limitedContext>(0);
		}
		public Vacuum_stmtContext vacuum_stmt() {
			return GetRuleContext<Vacuum_stmtContext>(0);
		}
		public ITerminalNode K_EXPLAIN() { return GetToken(SQLiteParser.K_EXPLAIN, 0); }
		public ITerminalNode K_QUERY() { return GetToken(SQLiteParser.K_QUERY, 0); }
		public ITerminalNode K_PLAN() { return GetToken(SQLiteParser.K_PLAN, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_EXPLAIN) {
				{
				State = 200; Match(K_EXPLAIN);
				State = 203;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_QUERY) {
					{
					State = 201; Match(K_QUERY);
					State = 202; Match(K_PLAN);
					}
				}

				}
			}

			State = 237;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 207; alter_table_stmt();
				}
				break;

			case 2:
				{
				State = 208; analyze_stmt();
				}
				break;

			case 3:
				{
				State = 209; attach_stmt();
				}
				break;

			case 4:
				{
				State = 210; begin_stmt();
				}
				break;

			case 5:
				{
				State = 211; commit_stmt();
				}
				break;

			case 6:
				{
				State = 212; compound_select_stmt();
				}
				break;

			case 7:
				{
				State = 213; create_index_stmt();
				}
				break;

			case 8:
				{
				State = 214; create_table_stmt();
				}
				break;

			case 9:
				{
				State = 215; create_trigger_stmt();
				}
				break;

			case 10:
				{
				State = 216; create_view_stmt();
				}
				break;

			case 11:
				{
				State = 217; create_virtual_table_stmt();
				}
				break;

			case 12:
				{
				State = 218; delete_stmt();
				}
				break;

			case 13:
				{
				State = 219; delete_stmt_limited();
				}
				break;

			case 14:
				{
				State = 220; detach_stmt();
				}
				break;

			case 15:
				{
				State = 221; drop_index_stmt();
				}
				break;

			case 16:
				{
				State = 222; drop_table_stmt();
				}
				break;

			case 17:
				{
				State = 223; drop_trigger_stmt();
				}
				break;

			case 18:
				{
				State = 224; drop_view_stmt();
				}
				break;

			case 19:
				{
				State = 225; factored_select_stmt();
				}
				break;

			case 20:
				{
				State = 226; insert_stmt();
				}
				break;

			case 21:
				{
				State = 227; pragma_stmt();
				}
				break;

			case 22:
				{
				State = 228; reindex_stmt();
				}
				break;

			case 23:
				{
				State = 229; release_stmt();
				}
				break;

			case 24:
				{
				State = 230; rollback_stmt();
				}
				break;

			case 25:
				{
				State = 231; savepoint_stmt();
				}
				break;

			case 26:
				{
				State = 232; simple_select_stmt();
				}
				break;

			case 27:
				{
				State = 233; select_stmt();
				}
				break;

			case 28:
				{
				State = 234; update_stmt();
				}
				break;

			case 29:
				{
				State = 235; update_stmt_limited();
				}
				break;

			case 30:
				{
				State = 236; vacuum_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_ALTER() { return GetToken(SQLiteParser.K_ALTER, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_RENAME() { return GetToken(SQLiteParser.K_RENAME, 0); }
		public ITerminalNode K_TO() { return GetToken(SQLiteParser.K_TO, 0); }
		public New_table_nameContext new_table_name() {
			return GetRuleContext<New_table_nameContext>(0);
		}
		public ITerminalNode K_ADD() { return GetToken(SQLiteParser.K_ADD, 0); }
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_COLUMN() { return GetToken(SQLiteParser.K_COLUMN, 0); }
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_alter_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(K_ALTER);
			State = 240; Match(K_TABLE);
			State = 244;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 241; database_name();
				State = 242; Match(DOT);
				}
				break;
			}
			State = 246; table_name();
			State = 255;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_RENAME:
				{
				State = 247; Match(K_RENAME);
				State = 248; Match(K_TO);
				State = 249; new_table_name();
				}
				break;
			case K_ADD:
				{
				State = 250; Match(K_ADD);
				State = 252;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 251; Match(K_COLUMN);
					}
					break;
				}
				State = 254; column_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_stmtContext : ParserRuleContext {
		public ITerminalNode K_ANALYZE() { return GetToken(SQLiteParser.K_ANALYZE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Table_or_index_nameContext table_or_index_name() {
			return GetRuleContext<Table_or_index_nameContext>(0);
		}
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAnalyze_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAnalyze_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyze_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_stmtContext analyze_stmt() {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_analyze_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(K_ANALYZE);
			State = 264;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 258; database_name();
				}
				break;

			case 2:
				{
				State = 259; table_or_index_name();
				}
				break;

			case 3:
				{
				State = 260; database_name();
				State = 261; Match(DOT);
				State = 262; table_or_index_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attach_stmtContext : ParserRuleContext {
		public ITerminalNode K_ATTACH() { return GetToken(SQLiteParser.K_ATTACH, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_DATABASE() { return GetToken(SQLiteParser.K_DATABASE, 0); }
		public Attach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAttach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAttach_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attach_stmtContext attach_stmt() {
		Attach_stmtContext _localctx = new Attach_stmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_attach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(K_ATTACH);
			State = 268;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 267; Match(K_DATABASE);
				}
				break;
			}
			State = 270; expr(0);
			State = 271; Match(K_AS);
			State = 272; database_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_stmtContext : ParserRuleContext {
		public ITerminalNode K_BEGIN() { return GetToken(SQLiteParser.K_BEGIN, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SQLiteParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SQLiteParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SQLiteParser.K_EXCLUSIVE, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Begin_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterBegin_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitBegin_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_stmtContext begin_stmt() {
		Begin_stmtContext _localctx = new Begin_stmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_begin_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(K_BEGIN);
			State = 276;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (K_DEFERRED - 59)) | (1L << (K_EXCLUSIVE - 59)) | (1L << (K_IMMEDIATE - 59)))) != 0)) {
				{
				State = 275;
				_la = _input.La(1);
				if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (K_DEFERRED - 59)) | (1L << (K_EXCLUSIVE - 59)) | (1L << (K_IMMEDIATE - 59)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 282;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 278; Match(K_TRANSACTION);
				State = 280;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 279; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		public ITerminalNode K_COMMIT() { return GetToken(SQLiteParser.K_COMMIT, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = _input.La(1);
			if ( !(_la==K_COMMIT || _la==K_END) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 289;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 285; Match(K_TRANSACTION);
				State = 287;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 286; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_select_stmtContext : ParserRuleContext {
		public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] K_UNION() { return GetTokens(SQLiteParser.K_UNION); }
		public ITerminalNode K_UNION(int i) {
			return GetToken(SQLiteParser.K_UNION, i);
		}
		public ITerminalNode[] K_INTERSECT() { return GetTokens(SQLiteParser.K_INTERSECT); }
		public ITerminalNode K_INTERSECT(int i) {
			return GetToken(SQLiteParser.K_INTERSECT, i);
		}
		public ITerminalNode[] K_EXCEPT() { return GetTokens(SQLiteParser.K_EXCEPT); }
		public ITerminalNode K_EXCEPT(int i) {
			return GetToken(SQLiteParser.K_EXCEPT, i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public ITerminalNode[] K_ALL() { return GetTokens(SQLiteParser.K_ALL); }
		public ITerminalNode K_ALL(int i) {
			return GetToken(SQLiteParser.K_ALL, i);
		}
		public Compound_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCompound_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCompound_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_select_stmtContext compound_select_stmt() {
		Compound_select_stmtContext _localctx = new Compound_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_compound_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 291; Match(K_WITH);
				State = 293;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
				case 1:
					{
					State = 292; Match(K_RECURSIVE);
					}
					break;
				}
				State = 295; common_table_expression();
				State = 300;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 296; Match(COMMA);
					State = 297; common_table_expression();
					}
					}
					State = 302;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 305; select_core();
			State = 315;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 312;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_UNION:
					{
					State = 306; Match(K_UNION);
					State = 308;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_ALL) {
						{
						State = 307; Match(K_ALL);
						}
					}

					}
					break;
				case K_INTERSECT:
					{
					State = 310; Match(K_INTERSECT);
					}
					break;
				case K_EXCEPT:
					{
					State = 311; Match(K_EXCEPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 314; select_core();
				}
				}
				State = 317;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION );
			State = 329;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 319; Match(K_ORDER);
				State = 320; Match(K_BY);
				State = 321; ordering_term();
				State = 326;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 322; Match(COMMA);
					State = 323; ordering_term();
					}
					}
					State = 328;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 337;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 331; Match(K_LIMIT);
				State = 332; expr(0);
				State = 335;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 333;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 334; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SQLiteParser.K_INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_stmtContext create_index_stmt() {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_create_index_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(K_CREATE);
			State = 341;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_UNIQUE) {
				{
				State = 340; Match(K_UNIQUE);
				}
			}

			State = 343; Match(K_INDEX);
			State = 347;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 344; Match(K_IF);
				State = 345; Match(K_NOT);
				State = 346; Match(K_EXISTS);
				}
				break;
			}
			State = 352;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 349; database_name();
				State = 350; Match(DOT);
				}
				break;
			}
			State = 354; index_name();
			State = 355; Match(K_ON);
			State = 356; table_name();
			State = 357; Match(OPEN_PAR);
			State = 358; indexed_column();
			State = 363;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 359; Match(COMMA);
				State = 360; indexed_column();
				}
				}
				State = 365;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 366; Match(CLOSE_PAR);
			State = 369;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 367; Match(K_WHERE);
				State = 368; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_defContext[] column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public Table_constraintContext[] table_constraint() {
			return GetRuleContexts<Table_constraintContext>();
		}
		public Table_constraintContext table_constraint(int i) {
			return GetRuleContext<Table_constraintContext>(i);
		}
		public ITerminalNode K_WITHOUT() { return GetToken(SQLiteParser.K_WITHOUT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(K_CREATE);
			State = 373;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 372;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 375; Match(K_TABLE);
			State = 379;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				State = 376; Match(K_IF);
				State = 377; Match(K_NOT);
				State = 378; Match(K_EXISTS);
				}
				break;
			}
			State = 384;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 381; database_name();
				State = 382; Match(DOT);
				}
				break;
			}
			State = 386; table_name();
			State = 410;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_PAR:
				{
				State = 387; Match(OPEN_PAR);
				State = 388; column_def();
				State = 393;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 389; Match(COMMA);
						State = 390; column_def();
						}
						} 
					}
					State = 395;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
				}
				State = 400;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 396; Match(COMMA);
					State = 397; table_constraint();
					}
					}
					State = 402;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 403; Match(CLOSE_PAR);
				State = 406;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_WITHOUT) {
					{
					State = 404; Match(K_WITHOUT);
					State = 405; Match(IDENTIFIER);
					}
				}

				}
				break;
			case K_AS:
				{
				State = 408; Match(K_AS);
				State = 409; select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SQLiteParser.K_TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_BEGIN() { return GetToken(SQLiteParser.K_BEGIN, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_INSERT() { return GetToken(SQLiteParser.K_INSERT, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext[] database_name() {
			return GetRuleContexts<Database_nameContext>();
		}
		public Database_nameContext database_name(int i) {
			return GetRuleContext<Database_nameContext>(i);
		}
		public ITerminalNode K_BEFORE() { return GetToken(SQLiteParser.K_BEFORE, 0); }
		public ITerminalNode K_AFTER() { return GetToken(SQLiteParser.K_AFTER, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(SQLiteParser.K_INSTEAD, 0); }
		public ITerminalNode[] K_OF() { return GetTokens(SQLiteParser.K_OF); }
		public ITerminalNode K_OF(int i) {
			return GetToken(SQLiteParser.K_OF, i);
		}
		public ITerminalNode K_FOR() { return GetToken(SQLiteParser.K_FOR, 0); }
		public ITerminalNode K_EACH() { return GetToken(SQLiteParser.K_EACH, 0); }
		public ITerminalNode K_ROW() { return GetToken(SQLiteParser.K_ROW, 0); }
		public ITerminalNode K_WHEN() { return GetToken(SQLiteParser.K_WHEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Update_stmtContext[] update_stmt() {
			return GetRuleContexts<Update_stmtContext>();
		}
		public Update_stmtContext update_stmt(int i) {
			return GetRuleContext<Update_stmtContext>(i);
		}
		public Insert_stmtContext[] insert_stmt() {
			return GetRuleContexts<Insert_stmtContext>();
		}
		public Insert_stmtContext insert_stmt(int i) {
			return GetRuleContext<Insert_stmtContext>(i);
		}
		public Delete_stmtContext[] delete_stmt() {
			return GetRuleContexts<Delete_stmtContext>();
		}
		public Delete_stmtContext delete_stmt(int i) {
			return GetRuleContext<Delete_stmtContext>(i);
		}
		public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_trigger_stmtContext create_trigger_stmt() {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_create_trigger_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(K_CREATE);
			State = 414;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 413;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 416; Match(K_TRIGGER);
			State = 420;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 417; Match(K_IF);
				State = 418; Match(K_NOT);
				State = 419; Match(K_EXISTS);
				}
				break;
			}
			State = 425;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 422; database_name();
				State = 423; Match(DOT);
				}
				break;
			}
			State = 427; trigger_name();
			State = 432;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_BEFORE:
				{
				State = 428; Match(K_BEFORE);
				}
				break;
			case K_AFTER:
				{
				State = 429; Match(K_AFTER);
				}
				break;
			case K_INSTEAD:
				{
				State = 430; Match(K_INSTEAD);
				State = 431; Match(K_OF);
				}
				break;
			case K_DELETE:
			case K_INSERT:
			case K_UPDATE:
				break;
			default:
				break;
			}
			State = 448;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_DELETE:
				{
				State = 434; Match(K_DELETE);
				}
				break;
			case K_INSERT:
				{
				State = 435; Match(K_INSERT);
				}
				break;
			case K_UPDATE:
				{
				State = 436; Match(K_UPDATE);
				State = 446;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_OF) {
					{
					State = 437; Match(K_OF);
					State = 438; column_name();
					State = 443;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 439; Match(COMMA);
						State = 440; column_name();
						}
						}
						State = 445;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 450; Match(K_ON);
			State = 454;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 451; database_name();
				State = 452; Match(DOT);
				}
				break;
			}
			State = 456; table_name();
			State = 460;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_FOR) {
				{
				State = 457; Match(K_FOR);
				State = 458; Match(K_EACH);
				State = 459; Match(K_ROW);
				}
			}

			State = 464;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHEN) {
				{
				State = 462; Match(K_WHEN);
				State = 463; expr(0);
				}
			}

			State = 466; Match(K_BEGIN);
			State = 475;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 471;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					State = 467; update_stmt();
					}
					break;

				case 2:
					{
					State = 468; insert_stmt();
					}
					break;

				case 3:
					{
					State = 469; delete_stmt();
					}
					break;

				case 4:
					{
					State = 470; select_stmt();
					}
					break;
				}
				State = 473; Match(SCOL);
				}
				}
				State = 477;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==K_DELETE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (K_INSERT - 89)) | (1L << (K_REPLACE - 89)) | (1L << (K_SELECT - 89)) | (1L << (K_UPDATE - 89)) | (1L << (K_VALUES - 89)) | (1L << (K_WITH - 89)))) != 0) );
			State = 479; Match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SQLiteParser.K_VIEW, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(K_CREATE);
			State = 483;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 482;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 485; Match(K_VIEW);
			State = 489;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 486; Match(K_IF);
				State = 487; Match(K_NOT);
				State = 488; Match(K_EXISTS);
				}
				break;
			}
			State = 494;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 491; database_name();
				State = 492; Match(DOT);
				}
				break;
			}
			State = 496; view_name();
			State = 497; Match(K_AS);
			State = 498; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_virtual_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_VIRTUAL() { return GetToken(SQLiteParser.K_VIRTUAL, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_USING() { return GetToken(SQLiteParser.K_USING, 0); }
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Module_argumentContext[] module_argument() {
			return GetRuleContexts<Module_argumentContext>();
		}
		public Module_argumentContext module_argument(int i) {
			return GetRuleContext<Module_argumentContext>(i);
		}
		public Create_virtual_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_virtual_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_virtual_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_virtual_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_virtual_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_virtual_table_stmtContext create_virtual_table_stmt() {
		Create_virtual_table_stmtContext _localctx = new Create_virtual_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_create_virtual_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(K_CREATE);
			State = 501; Match(K_VIRTUAL);
			State = 502; Match(K_TABLE);
			State = 506;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 503; Match(K_IF);
				State = 504; Match(K_NOT);
				State = 505; Match(K_EXISTS);
				}
				break;
			}
			State = 511;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 508; database_name();
				State = 509; Match(DOT);
				}
				break;
			}
			State = 513; table_name();
			State = 514; Match(K_USING);
			State = 515; module_name();
			State = 527;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 516; Match(OPEN_PAR);
				State = 517; module_argument();
				State = 522;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 518; Match(COMMA);
					State = 519; module_argument();
					}
					}
					State = 524;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 525; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 529; with_clause();
				}
			}

			State = 532; Match(K_DELETE);
			State = 533; Match(K_FROM);
			State = 534; qualified_table_name();
			State = 537;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 535; Match(K_WHERE);
				State = 536; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmt_limitedContext : ParserRuleContext {
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Delete_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDelete_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDelete_stmt_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmt_limitedContext delete_stmt_limited() {
		Delete_stmt_limitedContext _localctx = new Delete_stmt_limitedContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_delete_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 539; with_clause();
				}
			}

			State = 542; Match(K_DELETE);
			State = 543; Match(K_FROM);
			State = 544; qualified_table_name();
			State = 547;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 545; Match(K_WHERE);
				State = 546; expr(0);
				}
			}

			State = 567;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT || _la==K_ORDER) {
				{
				State = 559;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ORDER) {
					{
					State = 549; Match(K_ORDER);
					State = 550; Match(K_BY);
					State = 551; ordering_term();
					State = 556;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 552; Match(COMMA);
						State = 553; ordering_term();
						}
						}
						State = 558;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 561; Match(K_LIMIT);
				State = 562; expr(0);
				State = 565;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 563;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 564; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Detach_stmtContext : ParserRuleContext {
		public ITerminalNode K_DETACH() { return GetToken(SQLiteParser.K_DETACH, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_DATABASE() { return GetToken(SQLiteParser.K_DATABASE, 0); }
		public Detach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDetach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDetach_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Detach_stmtContext detach_stmt() {
		Detach_stmtContext _localctx = new Detach_stmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_detach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; Match(K_DETACH);
			State = 571;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 570; Match(K_DATABASE);
				}
				break;
			}
			State = 573; database_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_index_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SQLiteParser.K_INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_index_stmtContext drop_index_stmt() {
		Drop_index_stmtContext _localctx = new Drop_index_stmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_drop_index_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; Match(K_DROP);
			State = 576; Match(K_INDEX);
			State = 579;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 577; Match(K_IF);
				State = 578; Match(K_EXISTS);
				}
				break;
			}
			State = 584;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 581; database_name();
				State = 582; Match(DOT);
				}
				break;
			}
			State = 586; index_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_stmtContext drop_table_stmt() {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_drop_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588; Match(K_DROP);
			State = 589; Match(K_TABLE);
			State = 592;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 590; Match(K_IF);
				State = 591; Match(K_EXISTS);
				}
				break;
			}
			State = 597;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 594; database_name();
				State = 595; Match(DOT);
				}
				break;
			}
			State = 599; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SQLiteParser.K_TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_trigger_stmtContext drop_trigger_stmt() {
		Drop_trigger_stmtContext _localctx = new Drop_trigger_stmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_drop_trigger_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601; Match(K_DROP);
			State = 602; Match(K_TRIGGER);
			State = 605;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				State = 603; Match(K_IF);
				State = 604; Match(K_EXISTS);
				}
				break;
			}
			State = 610;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 607; database_name();
				State = 608; Match(DOT);
				}
				break;
			}
			State = 612; trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SQLiteParser.K_VIEW, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_view_stmtContext drop_view_stmt() {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_drop_view_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; Match(K_DROP);
			State = 615; Match(K_VIEW);
			State = 618;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 616; Match(K_IF);
				State = 617; Match(K_EXISTS);
				}
				break;
			}
			State = 623;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 620; database_name();
				State = 621; Match(DOT);
				}
				break;
			}
			State = 625; view_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factored_select_stmtContext : ParserRuleContext {
		public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Factored_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factored_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterFactored_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitFactored_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactored_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factored_select_stmtContext factored_select_stmt() {
		Factored_select_stmtContext _localctx = new Factored_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_factored_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 627; Match(K_WITH);
				State = 629;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
				case 1:
					{
					State = 628; Match(K_RECURSIVE);
					}
					break;
				}
				State = 631; common_table_expression();
				State = 636;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 632; Match(COMMA);
					State = 633; common_table_expression();
					}
					}
					State = 638;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 641; select_core();
			State = 647;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 642; compound_operator();
				State = 643; select_core();
				}
				}
				State = 649;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 660;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 650; Match(K_ORDER);
				State = 651; Match(K_BY);
				State = 652; ordering_term();
				State = 657;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 653; Match(COMMA);
					State = 654; ordering_term();
					}
					}
					State = 659;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 668;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 662; Match(K_LIMIT);
				State = 663; expr(0);
				State = 666;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 664;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 665; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public ITerminalNode K_INTO() { return GetToken(SQLiteParser.K_INTO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_INSERT() { return GetToken(SQLiteParser.K_INSERT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_DEFAULT() { return GetToken(SQLiteParser.K_DEFAULT, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 670; with_clause();
				}
			}

			State = 690;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 673; Match(K_INSERT);
				}
				break;

			case 2:
				{
				State = 674; Match(K_REPLACE);
				}
				break;

			case 3:
				{
				State = 675; Match(K_INSERT);
				State = 676; Match(K_OR);
				State = 677; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 678; Match(K_INSERT);
				State = 679; Match(K_OR);
				State = 680; Match(K_ROLLBACK);
				}
				break;

			case 5:
				{
				State = 681; Match(K_INSERT);
				State = 682; Match(K_OR);
				State = 683; Match(K_ABORT);
				}
				break;

			case 6:
				{
				State = 684; Match(K_INSERT);
				State = 685; Match(K_OR);
				State = 686; Match(K_FAIL);
				}
				break;

			case 7:
				{
				State = 687; Match(K_INSERT);
				State = 688; Match(K_OR);
				State = 689; Match(K_IGNORE);
				}
				break;
			}
			State = 692; Match(K_INTO);
			State = 696;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 693; database_name();
				State = 694; Match(DOT);
				}
				break;
			}
			State = 698; table_name();
			State = 710;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 699; Match(OPEN_PAR);
				State = 700; column_name();
				State = 705;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 701; Match(COMMA);
					State = 702; column_name();
					}
					}
					State = 707;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 708; Match(CLOSE_PAR);
				}
			}

			State = 743;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 712; Match(K_VALUES);
				State = 713; Match(OPEN_PAR);
				State = 714; expr(0);
				State = 719;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 715; Match(COMMA);
					State = 716; expr(0);
					}
					}
					State = 721;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 722; Match(CLOSE_PAR);
				State = 737;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 723; Match(COMMA);
					State = 724; Match(OPEN_PAR);
					State = 725; expr(0);
					State = 730;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 726; Match(COMMA);
						State = 727; expr(0);
						}
						}
						State = 732;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 733; Match(CLOSE_PAR);
					}
					}
					State = 739;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 740; select_stmt();
				}
				break;

			case 3:
				{
				State = 741; Match(K_DEFAULT);
				State = 742; Match(K_VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_stmtContext : ParserRuleContext {
		public ITerminalNode K_PRAGMA() { return GetToken(SQLiteParser.K_PRAGMA, 0); }
		public Pragma_nameContext pragma_name() {
			return GetRuleContext<Pragma_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Pragma_valueContext pragma_value() {
			return GetRuleContext<Pragma_valueContext>(0);
		}
		public Pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterPragma_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitPragma_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_stmtContext pragma_stmt() {
		Pragma_stmtContext _localctx = new Pragma_stmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_pragma_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; Match(K_PRAGMA);
			State = 749;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				State = 746; database_name();
				State = 747; Match(DOT);
				}
				break;
			}
			State = 751; pragma_name();
			State = 758;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ASSIGN:
				{
				State = 752; Match(ASSIGN);
				State = 753; pragma_value();
				}
				break;
			case OPEN_PAR:
				{
				State = 754; Match(OPEN_PAR);
				State = 755; pragma_value();
				State = 756; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CREATE:
			case K_DELETE:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXPLAIN:
			case K_INSERT:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WITH:
			case UNEXPECTED_CHAR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_stmtContext : ParserRuleContext {
		public ITerminalNode K_REINDEX() { return GetToken(SQLiteParser.K_REINDEX, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterReindex_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitReindex_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReindex_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_stmtContext reindex_stmt() {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_reindex_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; Match(K_REINDEX);
			State = 771;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 761; collation_name();
				}
				break;

			case 2:
				{
				State = 765;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					State = 762; database_name();
					State = 763; Match(DOT);
					}
					break;
				}
				State = 769;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
				case 1:
					{
					State = 767; table_name();
					}
					break;

				case 2:
					{
					State = 768; index_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Release_stmtContext : ParserRuleContext {
		public ITerminalNode K_RELEASE() { return GetToken(SQLiteParser.K_RELEASE, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public Release_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_release_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterRelease_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitRelease_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelease_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Release_stmtContext release_stmt() {
		Release_stmtContext _localctx = new Release_stmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_release_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; Match(K_RELEASE);
			State = 775;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 774; Match(K_SAVEPOINT);
				}
				break;
			}
			State = 777; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public ITerminalNode K_TO() { return GetToken(SQLiteParser.K_TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779; Match(K_ROLLBACK);
			State = 784;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 780; Match(K_TRANSACTION);
				State = 782;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
				case 1:
					{
					State = 781; transaction_name();
					}
					break;
				}
				}
			}

			State = 791;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TO) {
				{
				State = 786; Match(K_TO);
				State = 788;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					State = 787; Match(K_SAVEPOINT);
					}
					break;
				}
				State = 790; savepoint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_stmtContext : ParserRuleContext {
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSavepoint_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSavepoint_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_stmtContext savepoint_stmt() {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_savepoint_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793; Match(K_SAVEPOINT);
			State = 794; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_stmtContext : ParserRuleContext {
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Simple_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSimple_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSimple_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_stmtContext simple_select_stmt() {
		Simple_select_stmtContext _localctx = new Simple_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_simple_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 796; Match(K_WITH);
				State = 798;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					State = 797; Match(K_RECURSIVE);
					}
					break;
				}
				State = 800; common_table_expression();
				State = 805;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 801; Match(COMMA);
					State = 802; common_table_expression();
					}
					}
					State = 807;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 810; select_core();
			State = 821;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 811; Match(K_ORDER);
				State = 812; Match(K_BY);
				State = 813; ordering_term();
				State = 818;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 814; Match(COMMA);
					State = 815; ordering_term();
					}
					}
					State = 820;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 829;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 823; Match(K_LIMIT);
				State = 824; expr(0);
				State = 827;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 825;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 826; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Select_or_valuesContext[] select_or_values() {
			return GetRuleContexts<Select_or_valuesContext>();
		}
		public Select_or_valuesContext select_or_values(int i) {
			return GetRuleContext<Select_or_valuesContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 831; Match(K_WITH);
				State = 833;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					State = 832; Match(K_RECURSIVE);
					}
					break;
				}
				State = 835; common_table_expression();
				State = 840;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 836; Match(COMMA);
					State = 837; common_table_expression();
					}
					}
					State = 842;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 845; select_or_values();
			State = 851;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 846; compound_operator();
				State = 847; select_or_values();
				}
				}
				State = 853;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 864;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 854; Match(K_ORDER);
				State = 855; Match(K_BY);
				State = 856; ordering_term();
				State = 861;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 857; Match(COMMA);
					State = 858; ordering_term();
					}
					}
					State = 863;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 872;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 866; Match(K_LIMIT);
				State = 867; expr(0);
				State = 870;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 868;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 869; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_valuesContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(SQLiteParser.K_SELECT, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_GROUP() { return GetToken(SQLiteParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_HAVING() { return GetToken(SQLiteParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public Select_or_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSelect_or_values(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSelect_or_values(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_valuesContext select_or_values() {
		Select_or_valuesContext _localctx = new Select_or_valuesContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_select_or_values);
		int _la;
		try {
			State = 948;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 874; Match(K_SELECT);
				State = 876;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					State = 875;
					_la = _input.La(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 878; result_column();
				State = 883;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 879; Match(COMMA);
					State = 880; result_column();
					}
					}
					State = 885;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 898;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_FROM) {
					{
					State = 886; Match(K_FROM);
					State = 896;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
					case 1:
						{
						State = 887; table_or_subquery();
						State = 892;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 888; Match(COMMA);
							State = 889; table_or_subquery();
							}
							}
							State = 894;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;

					case 2:
						{
						State = 895; join_clause();
						}
						break;
					}
					}
				}

				State = 902;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_WHERE) {
					{
					State = 900; Match(K_WHERE);
					State = 901; expr(0);
					}
				}

				State = 918;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_GROUP) {
					{
					State = 904; Match(K_GROUP);
					State = 905; Match(K_BY);
					State = 906; expr(0);
					State = 911;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 907; Match(COMMA);
						State = 908; expr(0);
						}
						}
						State = 913;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 916;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_HAVING) {
						{
						State = 914; Match(K_HAVING);
						State = 915; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 920; Match(K_VALUES);
				State = 921; Match(OPEN_PAR);
				State = 922; expr(0);
				State = 927;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 923; Match(COMMA);
					State = 924; expr(0);
					}
					}
					State = 929;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 930; Match(CLOSE_PAR);
				State = 945;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 931; Match(COMMA);
					State = 932; Match(OPEN_PAR);
					State = 933; expr(0);
					State = 938;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 934; Match(COMMA);
						State = 935; expr(0);
						}
						}
						State = 940;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 941; Match(CLOSE_PAR);
					}
					}
					State = 947;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(SQLiteParser.K_SET, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 950; with_clause();
				}
			}

			State = 953; Match(K_UPDATE);
			State = 964;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				State = 954; Match(K_OR);
				State = 955; Match(K_ROLLBACK);
				}
				break;

			case 2:
				{
				State = 956; Match(K_OR);
				State = 957; Match(K_ABORT);
				}
				break;

			case 3:
				{
				State = 958; Match(K_OR);
				State = 959; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 960; Match(K_OR);
				State = 961; Match(K_FAIL);
				}
				break;

			case 5:
				{
				State = 962; Match(K_OR);
				State = 963; Match(K_IGNORE);
				}
				break;
			}
			State = 966; qualified_table_name();
			State = 967; Match(K_SET);
			State = 968; column_name();
			State = 969; Match(ASSIGN);
			State = 970; expr(0);
			State = 978;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 971; Match(COMMA);
				State = 972; column_name();
				State = 973; Match(ASSIGN);
				State = 974; expr(0);
				}
				}
				State = 980;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 983;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 981; Match(K_WHERE);
				State = 982; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmt_limitedContext : ParserRuleContext {
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(SQLiteParser.K_SET, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Update_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmt_limitedContext update_stmt_limited() {
		Update_stmt_limitedContext _localctx = new Update_stmt_limitedContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_update_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 985; with_clause();
				}
			}

			State = 988; Match(K_UPDATE);
			State = 999;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				State = 989; Match(K_OR);
				State = 990; Match(K_ROLLBACK);
				}
				break;

			case 2:
				{
				State = 991; Match(K_OR);
				State = 992; Match(K_ABORT);
				}
				break;

			case 3:
				{
				State = 993; Match(K_OR);
				State = 994; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 995; Match(K_OR);
				State = 996; Match(K_FAIL);
				}
				break;

			case 5:
				{
				State = 997; Match(K_OR);
				State = 998; Match(K_IGNORE);
				}
				break;
			}
			State = 1001; qualified_table_name();
			State = 1002; Match(K_SET);
			State = 1003; column_name();
			State = 1004; Match(ASSIGN);
			State = 1005; expr(0);
			State = 1013;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1006; Match(COMMA);
				State = 1007; column_name();
				State = 1008; Match(ASSIGN);
				State = 1009; expr(0);
				}
				}
				State = 1015;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1018;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 1016; Match(K_WHERE);
				State = 1017; expr(0);
				}
			}

			State = 1038;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT || _la==K_ORDER) {
				{
				State = 1030;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ORDER) {
					{
					State = 1020; Match(K_ORDER);
					State = 1021; Match(K_BY);
					State = 1022; ordering_term();
					State = 1027;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1023; Match(COMMA);
						State = 1024; ordering_term();
						}
						}
						State = 1029;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1032; Match(K_LIMIT);
				State = 1033; expr(0);
				State = 1036;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 1034;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 1035; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_stmtContext : ParserRuleContext {
		public ITerminalNode K_VACUUM() { return GetToken(SQLiteParser.K_VACUUM, 0); }
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterVacuum_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitVacuum_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVacuum_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_stmtContext vacuum_stmt() {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_vacuum_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040; Match(K_VACUUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042; column_name();
			State = 1044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1043; type_name();
				}
				break;
			}
			State = 1049;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_CONSTRAINT) | (1L << K_DEFAULT))) != 0) || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (K_NOT - 103)) | (1L << (K_NULL - 103)) | (1L << (K_PRIMARY - 103)) | (1L << (K_REFERENCES - 103)) | (1L << (K_UNIQUE - 103)))) != 0)) {
				{
				{
				State = 1046; column_constraint();
				}
				}
				State = 1051;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Signed_numberContext[] signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1052; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1055;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,146,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1067;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				State = 1057; Match(OPEN_PAR);
				State = 1058; signed_number();
				State = 1059; Match(CLOSE_PAR);
				}
				break;

			case 2:
				{
				State = 1061; Match(OPEN_PAR);
				State = 1062; signed_number();
				State = 1063; Match(COMMA);
				State = 1064; signed_number();
				State = 1065; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode K_PRIMARY() { return GetToken(SQLiteParser.K_PRIMARY, 0); }
		public ITerminalNode K_KEY() { return GetToken(SQLiteParser.K_KEY, 0); }
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_CHECK() { return GetToken(SQLiteParser.K_CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_DEFAULT() { return GetToken(SQLiteParser.K_DEFAULT, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode K_CONSTRAINT() { return GetToken(SQLiteParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SQLiteParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 1069; Match(K_CONSTRAINT);
				State = 1070; name();
				}
			}

			State = 1106;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_PRIMARY:
				{
				State = 1073; Match(K_PRIMARY);
				State = 1074; Match(K_KEY);
				State = 1076;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ASC || _la==K_DESC) {
					{
					State = 1075;
					_la = _input.La(1);
					if ( !(_la==K_ASC || _la==K_DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 1078; conflict_clause();
				State = 1080;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_AUTOINCREMENT) {
					{
					State = 1079; Match(K_AUTOINCREMENT);
					}
				}

				}
				break;
			case K_NOT:
			case K_NULL:
				{
				State = 1083;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 1082; Match(K_NOT);
					}
				}

				State = 1085; Match(K_NULL);
				State = 1086; conflict_clause();
				}
				break;
			case K_UNIQUE:
				{
				State = 1087; Match(K_UNIQUE);
				State = 1088; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 1089; Match(K_CHECK);
				State = 1090; Match(OPEN_PAR);
				State = 1091; expr(0);
				State = 1092; Match(CLOSE_PAR);
				}
				break;
			case K_DEFAULT:
				{
				State = 1094; Match(K_DEFAULT);
				State = 1101;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					State = 1095; signed_number();
					}
					break;

				case 2:
					{
					State = 1096; literal_value();
					}
					break;

				case 3:
					{
					State = 1097; Match(OPEN_PAR);
					State = 1098; expr(0);
					State = 1099; Match(CLOSE_PAR);
					}
					break;
				}
				}
				break;
			case K_COLLATE:
				{
				State = 1103; Match(K_COLLATE);
				State = 1104; collation_name();
				}
				break;
			case K_REFERENCES:
				{
				State = 1105; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SQLiteParser.K_CONFLICT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterConflict_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitConflict_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConflict_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1111;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ON) {
				{
				State = 1108; Match(K_ON);
				State = 1109; Match(K_CONFLICT);
				State = 1110;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (K_FAIL - 73)) | (1L << (K_IGNORE - 73)) | (1L << (K_REPLACE - 73)) | (1L << (K_ROLLBACK - 73)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralexprContext : ExprContext {
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public LiteralexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterLiteralexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitLiteralexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BindexprContext : ExprContext {
		public ITerminalNode BIND_PARAMETER() { return GetToken(SQLiteParser.BIND_PARAMETER, 0); }
		public BindexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterBindexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitBindexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColexprContext : ExprContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ColexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryexprContext : ExprContext {
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUnaryexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUnaryexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrconexprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StrconexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterStrconexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitStrconexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrconexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithtimesexprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArithtimesexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterArithtimesexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitArithtimesexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithtimesexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithplusexprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(SQLiteParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SQLiteParser.MINUS, 0); }
		public ArithplusexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterArithplusexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitArithplusexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithplusexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithbitexprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArithbitexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterArithbitexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitArithbitexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithbitexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithcompexprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArithcompexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterArithcompexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitArithcompexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithcompexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithequalexprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_IS() { return GetToken(SQLiteParser.K_IS, 0); }
		public ITerminalNode K_IN() { return GetToken(SQLiteParser.K_IN, 0); }
		public ITerminalNode K_LIKE() { return GetToken(SQLiteParser.K_LIKE, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SQLiteParser.K_GLOB, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SQLiteParser.K_MATCH, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SQLiteParser.K_REGEXP, 0); }
		public ArithequalexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterArithequalexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitArithequalexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithequalexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithandexprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_AND() { return GetToken(SQLiteParser.K_AND, 0); }
		public ArithandexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterArithandexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitArithandexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithandexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithorexprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ArithorexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterArithorexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitArithorexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithorexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncexprContext : ExprContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public FuncexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterFuncexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitFuncexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BrackexprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BrackexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterBrackexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitBrackexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrackexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastexprContext : ExprContext {
		public ITerminalNode K_CAST() { return GetToken(SQLiteParser.K_CAST, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public CastexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCastexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCastexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikeexprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_LIKE() { return GetToken(SQLiteParser.K_LIKE, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SQLiteParser.K_GLOB, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SQLiteParser.K_REGEXP, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SQLiteParser.K_MATCH, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(SQLiteParser.K_ESCAPE, 0); }
		public LikeexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterLikeexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitLikeexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullexprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_ISNULL() { return GetToken(SQLiteParser.K_ISNULL, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SQLiteParser.K_NOTNULL, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public NullexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterNullexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitNullexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsexprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_IS() { return GetToken(SQLiteParser.K_IS, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public IsexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterIsexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitIsexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenexprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_BETWEEN() { return GetToken(SQLiteParser.K_BETWEEN, 0); }
		public ITerminalNode K_AND() { return GetToken(SQLiteParser.K_AND, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public BetweenexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterBetweenexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitBetweenexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InexprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_IN() { return GetToken(SQLiteParser.K_IN, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public InexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterInexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitInexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryexprContext : ExprContext {
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public SubqueryexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSubqueryexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSubqueryexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseexprContext : ExprContext {
		public ITerminalNode K_CASE() { return GetToken(SQLiteParser.K_CASE, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] K_WHEN() { return GetTokens(SQLiteParser.K_WHEN); }
		public ITerminalNode K_WHEN(int i) {
			return GetToken(SQLiteParser.K_WHEN, i);
		}
		public ITerminalNode[] K_THEN() { return GetTokens(SQLiteParser.K_THEN); }
		public ITerminalNode K_THEN(int i) {
			return GetToken(SQLiteParser.K_THEN, i);
		}
		public ITerminalNode K_ELSE() { return GetToken(SQLiteParser.K_ELSE, 0); }
		public CaseexprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCaseexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCaseexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				_localctx = new LiteralexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1114; literal_value();
				}
				break;

			case 2:
				{
				_localctx = new BindexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1115; Match(BIND_PARAMETER);
				}
				break;

			case 3:
				{
				_localctx = new ColexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1124;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					State = 1119;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
					case 1:
						{
						State = 1116; database_name();
						State = 1117; Match(DOT);
						}
						break;
					}
					State = 1121; table_name();
					State = 1122; Match(DOT);
					}
					break;
				}
				State = 1126; column_name();
				}
				break;

			case 4:
				{
				_localctx = new UnaryexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1127; unary_operator();
				State = 1128; expr(19);
				}
				break;

			case 5:
				{
				_localctx = new FuncexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1130; function_name();
				State = 1131; Match(OPEN_PAR);
				State = 1144;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OPEN_PAR:
				case PLUS:
				case MINUS:
				case TILDE:
				case K_ABORT:
				case K_ACTION:
				case K_ADD:
				case K_AFTER:
				case K_ALL:
				case K_ALTER:
				case K_ANALYZE:
				case K_AND:
				case K_AS:
				case K_ASC:
				case K_ATTACH:
				case K_AUTOINCREMENT:
				case K_BEFORE:
				case K_BEGIN:
				case K_BETWEEN:
				case K_BY:
				case K_CASCADE:
				case K_CASE:
				case K_CAST:
				case K_CHECK:
				case K_COLLATE:
				case K_COLUMN:
				case K_COMMIT:
				case K_CONFLICT:
				case K_CONSTRAINT:
				case K_CREATE:
				case K_CROSS:
				case K_CURRENT_DATE:
				case K_CURRENT_TIME:
				case K_CURRENT_TIMESTAMP:
				case K_DATABASE:
				case K_DEFAULT:
				case K_DEFERRABLE:
				case K_DEFERRED:
				case K_DELETE:
				case K_DESC:
				case K_DETACH:
				case K_DISTINCT:
				case K_DROP:
				case K_EACH:
				case K_ELSE:
				case K_END:
				case K_ESCAPE:
				case K_EXCEPT:
				case K_EXCLUSIVE:
				case K_EXISTS:
				case K_EXPLAIN:
				case K_FAIL:
				case K_FOR:
				case K_FOREIGN:
				case K_FROM:
				case K_FULL:
				case K_GLOB:
				case K_GROUP:
				case K_HAVING:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IN:
				case K_INDEX:
				case K_INDEXED:
				case K_INITIALLY:
				case K_INNER:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERSECT:
				case K_INTO:
				case K_IS:
				case K_ISNULL:
				case K_JOIN:
				case K_KEY:
				case K_LEFT:
				case K_LIKE:
				case K_LIMIT:
				case K_MATCH:
				case K_NATURAL:
				case K_NO:
				case K_NOT:
				case K_NOTNULL:
				case K_NULL:
				case K_OF:
				case K_OFFSET:
				case K_ON:
				case K_OR:
				case K_ORDER:
				case K_OUTER:
				case K_PLAN:
				case K_PRAGMA:
				case K_PRIMARY:
				case K_QUERY:
				case K_RAISE:
				case K_RECURSIVE:
				case K_REFERENCES:
				case K_REGEXP:
				case K_REINDEX:
				case K_RELEASE:
				case K_RENAME:
				case K_REPLACE:
				case K_RESTRICT:
				case K_RIGHT:
				case K_ROLLBACK:
				case K_ROW:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_SET:
				case K_TABLE:
				case K_TEMP:
				case K_TEMPORARY:
				case K_THEN:
				case K_TO:
				case K_TRANSACTION:
				case K_TRIGGER:
				case K_UNION:
				case K_UNIQUE:
				case K_UPDATE:
				case K_USING:
				case K_VACUUM:
				case K_VALUES:
				case K_VIEW:
				case K_VIRTUAL:
				case K_WHEN:
				case K_WHERE:
				case K_WITH:
				case K_WITHOUT:
				case IDENTIFIER:
				case NUMERIC_LITERAL:
				case BIND_PARAMETER:
				case STRING_LITERAL:
				case BLOB_LITERAL:
					{
					State = 1133;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
					case 1:
						{
						State = 1132; Match(K_DISTINCT);
						}
						break;
					}
					State = 1135; expr(0);
					State = 1140;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1136; Match(COMMA);
						State = 1137; expr(0);
						}
						}
						State = 1142;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				case STAR:
					{
					State = 1143; Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					break;
				}
				State = 1146; Match(CLOSE_PAR);
				}
				break;

			case 6:
				{
				_localctx = new BrackexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1148; Match(OPEN_PAR);
				State = 1149; expr(0);
				State = 1150; Match(CLOSE_PAR);
				}
				break;

			case 7:
				{
				_localctx = new CastexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1152; Match(K_CAST);
				State = 1153; Match(OPEN_PAR);
				State = 1154; expr(0);
				State = 1155; Match(K_AS);
				State = 1156; type_name();
				State = 1157; Match(CLOSE_PAR);
				}
				break;

			case 8:
				{
				_localctx = new SubqueryexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1163;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_EXISTS || _la==K_NOT) {
					{
					State = 1160;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_NOT) {
						{
						State = 1159; Match(K_NOT);
						}
					}

					State = 1162; Match(K_EXISTS);
					}
				}

				State = 1165; Match(OPEN_PAR);
				State = 1166; select_stmt();
				State = 1167; Match(CLOSE_PAR);
				}
				break;

			case 9:
				{
				_localctx = new CaseexprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1169; Match(K_CASE);
				State = 1171;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
				case 1:
					{
					State = 1170; expr(0);
					}
					break;
				}
				State = 1178;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1173; Match(K_WHEN);
					State = 1174; expr(0);
					State = 1175; Match(K_THEN);
					State = 1176; expr(0);
					}
					}
					State = 1180;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==K_WHEN );
				State = 1184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ELSE) {
					{
					State = 1182; Match(K_ELSE);
					State = 1183; expr(0);
					}
				}

				State = 1186; Match(K_END);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1274;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,177,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1272;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
					case 1:
						{
						_localctx = new StrconexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1190;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 1191; Match(PIPE2);
						State = 1192; expr(19);
						}
						break;

					case 2:
						{
						_localctx = new ArithtimesexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1193;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 1194;
						((ArithtimesexprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((ArithtimesexprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1195; expr(18);
						}
						break;

					case 3:
						{
						_localctx = new ArithplusexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1196;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 1197;
						((ArithplusexprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ArithplusexprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1198; expr(17);
						}
						break;

					case 4:
						{
						_localctx = new ArithbitexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1199;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 1200;
						((ArithbitexprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
							((ArithbitexprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1201; expr(16);
						}
						break;

					case 5:
						{
						_localctx = new ArithcompexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1202;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 1203;
						((ArithcompexprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
							((ArithcompexprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1204; expr(15);
						}
						break;

					case 6:
						{
						_localctx = new ArithequalexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1205;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 1206;
						((ArithequalexprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ASSIGN) | (1L << EQ) | (1L << NOT_EQ1) | (1L << NOT_EQ2))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (K_GLOB - 78)) | (1L << (K_IN - 78)) | (1L << (K_IS - 78)) | (1L << (K_LIKE - 78)) | (1L << (K_MATCH - 78)) | (1L << (K_REGEXP - 78)))) != 0)) ) {
							((ArithequalexprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1207; expr(14);
						}
						break;

					case 7:
						{
						_localctx = new ArithandexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1208;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 1209; Match(K_AND);
						State = 1210; expr(13);
						}
						break;

					case 8:
						{
						_localctx = new ArithorexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1211;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 1212; Match(K_OR);
						State = 1213; expr(12);
						}
						break;

					case 9:
						{
						_localctx = new IsexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1214;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1215; Match(K_IS);
						State = 1217;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
						case 1:
							{
							State = 1216; Match(K_NOT);
							}
							break;
						}
						State = 1219; expr(6);
						}
						break;

					case 10:
						{
						_localctx = new BetweenexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1220;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1222;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 1221; Match(K_NOT);
							}
						}

						State = 1224; Match(K_BETWEEN);
						State = 1225; expr(0);
						State = 1226; Match(K_AND);
						State = 1227; expr(5);
						}
						break;

					case 11:
						{
						_localctx = new LikeexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1229;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1231;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 1230; Match(K_NOT);
							}
						}

						State = 1233;
						_la = _input.La(1);
						if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (K_GLOB - 78)) | (1L << (K_LIKE - 78)) | (1L << (K_MATCH - 78)) | (1L << (K_REGEXP - 78)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1234; expr(0);
						State = 1237;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
						case 1:
							{
							State = 1235; Match(K_ESCAPE);
							State = 1236; expr(0);
							}
							break;
						}
						}
						break;

					case 12:
						{
						_localctx = new NullexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1239;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 1244;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case K_ISNULL:
							{
							State = 1240; Match(K_ISNULL);
							}
							break;
						case K_NOTNULL:
							{
							State = 1241; Match(K_NOTNULL);
							}
							break;
						case K_NOT:
							{
							State = 1242; Match(K_NOT);
							State = 1243; Match(K_NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 13:
						{
						_localctx = new InexprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1246;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1248;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 1247; Match(K_NOT);
							}
						}

						State = 1250; Match(K_IN);
						State = 1270;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
						case 1:
							{
							State = 1251; Match(OPEN_PAR);
							State = 1261;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
							case 1:
								{
								State = 1252; select_stmt();
								}
								break;

							case 2:
								{
								State = 1253; expr(0);
								State = 1258;
								_errHandler.Sync(this);
								_la = _input.La(1);
								while (_la==COMMA) {
									{
									{
									State = 1254; Match(COMMA);
									State = 1255; expr(0);
									}
									}
									State = 1260;
									_errHandler.Sync(this);
									_la = _input.La(1);
								}
								}
								break;
							}
							State = 1263; Match(CLOSE_PAR);
							}
							break;

						case 2:
							{
							State = 1267;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
							case 1:
								{
								State = 1264; database_name();
								State = 1265; Match(DOT);
								}
								break;
							}
							State = 1269; table_name();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1276;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,177,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public ITerminalNode K_REFERENCES() { return GetToken(SQLiteParser.K_REFERENCES, 0); }
		public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode K_DEFERRABLE() { return GetToken(SQLiteParser.K_DEFERRABLE, 0); }
		public ITerminalNode[] K_ON() { return GetTokens(SQLiteParser.K_ON); }
		public ITerminalNode K_ON(int i) {
			return GetToken(SQLiteParser.K_ON, i);
		}
		public ITerminalNode[] K_MATCH() { return GetTokens(SQLiteParser.K_MATCH); }
		public ITerminalNode K_MATCH(int i) {
			return GetToken(SQLiteParser.K_MATCH, i);
		}
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public ITerminalNode[] K_DELETE() { return GetTokens(SQLiteParser.K_DELETE); }
		public ITerminalNode K_DELETE(int i) {
			return GetToken(SQLiteParser.K_DELETE, i);
		}
		public ITerminalNode[] K_UPDATE() { return GetTokens(SQLiteParser.K_UPDATE); }
		public ITerminalNode K_UPDATE(int i) {
			return GetToken(SQLiteParser.K_UPDATE, i);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(SQLiteParser.K_INITIALLY, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SQLiteParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SQLiteParser.K_IMMEDIATE, 0); }
		public ITerminalNode[] K_SET() { return GetTokens(SQLiteParser.K_SET); }
		public ITerminalNode K_SET(int i) {
			return GetToken(SQLiteParser.K_SET, i);
		}
		public ITerminalNode[] K_NULL() { return GetTokens(SQLiteParser.K_NULL); }
		public ITerminalNode K_NULL(int i) {
			return GetToken(SQLiteParser.K_NULL, i);
		}
		public ITerminalNode[] K_DEFAULT() { return GetTokens(SQLiteParser.K_DEFAULT); }
		public ITerminalNode K_DEFAULT(int i) {
			return GetToken(SQLiteParser.K_DEFAULT, i);
		}
		public ITerminalNode[] K_CASCADE() { return GetTokens(SQLiteParser.K_CASCADE); }
		public ITerminalNode K_CASCADE(int i) {
			return GetToken(SQLiteParser.K_CASCADE, i);
		}
		public ITerminalNode[] K_RESTRICT() { return GetTokens(SQLiteParser.K_RESTRICT); }
		public ITerminalNode K_RESTRICT(int i) {
			return GetToken(SQLiteParser.K_RESTRICT, i);
		}
		public ITerminalNode[] K_NO() { return GetTokens(SQLiteParser.K_NO); }
		public ITerminalNode K_NO(int i) {
			return GetToken(SQLiteParser.K_NO, i);
		}
		public ITerminalNode[] K_ACTION() { return GetTokens(SQLiteParser.K_ACTION); }
		public ITerminalNode K_ACTION(int i) {
			return GetToken(SQLiteParser.K_ACTION, i);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterForeign_key_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitForeign_key_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277; Match(K_REFERENCES);
			State = 1278; foreign_table();
			State = 1290;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1279; Match(OPEN_PAR);
				State = 1280; column_name();
				State = 1285;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1281; Match(COMMA);
					State = 1282; column_name();
					}
					}
					State = 1287;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1288; Match(CLOSE_PAR);
				}
			}

			State = 1310;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_MATCH || _la==K_ON) {
				{
				{
				State = 1306;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_ON:
					{
					State = 1292; Match(K_ON);
					State = 1293;
					_la = _input.La(1);
					if ( !(_la==K_DELETE || _la==K_UPDATE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 1302;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
					case 1:
						{
						State = 1294; Match(K_SET);
						State = 1295; Match(K_NULL);
						}
						break;

					case 2:
						{
						State = 1296; Match(K_SET);
						State = 1297; Match(K_DEFAULT);
						}
						break;

					case 3:
						{
						State = 1298; Match(K_CASCADE);
						}
						break;

					case 4:
						{
						State = 1299; Match(K_RESTRICT);
						}
						break;

					case 5:
						{
						State = 1300; Match(K_NO);
						State = 1301; Match(K_ACTION);
						}
						break;
					}
					}
					break;
				case K_MATCH:
					{
					State = 1304; Match(K_MATCH);
					State = 1305; name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 1312;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1323;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 1314;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 1313; Match(K_NOT);
					}
				}

				State = 1316; Match(K_DEFERRABLE);
				State = 1321;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					State = 1317; Match(K_INITIALLY);
					State = 1318; Match(K_DEFERRED);
					}
					break;

				case 2:
					{
					State = 1319; Match(K_INITIALLY);
					State = 1320; Match(K_IMMEDIATE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		public ITerminalNode K_RAISE() { return GetToken(SQLiteParser.K_RAISE, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterRaise_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitRaise_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1325; Match(K_RAISE);
			State = 1326; Match(OPEN_PAR);
			State = 1331;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_IGNORE:
				{
				State = 1327; Match(K_IGNORE);
				}
				break;
			case K_ABORT:
			case K_FAIL:
			case K_ROLLBACK:
				{
				State = 1328;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || _la==K_FAIL || _la==K_ROLLBACK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1329; Match(COMMA);
				State = 1330; error_message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1333; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterIndexed_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitIndexed_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexed_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335; column_name();
			State = 1338;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 1336; Match(K_COLLATE);
				State = 1337; collation_name();
				}
			}

			State = 1341;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 1340;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_CHECK() { return GetToken(SQLiteParser.K_CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_FOREIGN() { return GetToken(SQLiteParser.K_FOREIGN, 0); }
		public ITerminalNode K_KEY() { return GetToken(SQLiteParser.K_KEY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode K_CONSTRAINT() { return GetToken(SQLiteParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode K_PRIMARY() { return GetToken(SQLiteParser.K_PRIMARY, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 1343; Match(K_CONSTRAINT);
				State = 1344; name();
				}
			}

			State = 1383;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_PRIMARY:
			case K_UNIQUE:
				{
				State = 1350;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_PRIMARY:
					{
					State = 1347; Match(K_PRIMARY);
					State = 1348; Match(K_KEY);
					}
					break;
				case K_UNIQUE:
					{
					State = 1349; Match(K_UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1352; Match(OPEN_PAR);
				State = 1353; indexed_column();
				State = 1358;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1354; Match(COMMA);
					State = 1355; indexed_column();
					}
					}
					State = 1360;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1361; Match(CLOSE_PAR);
				State = 1362; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 1364; Match(K_CHECK);
				State = 1365; Match(OPEN_PAR);
				State = 1366; expr(0);
				State = 1367; Match(CLOSE_PAR);
				}
				break;
			case K_FOREIGN:
				{
				State = 1369; Match(K_FOREIGN);
				State = 1370; Match(K_KEY);
				State = 1371; Match(OPEN_PAR);
				State = 1372; column_name();
				State = 1377;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1373; Match(COMMA);
					State = 1374; column_name();
					}
					}
					State = 1379;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1380; Match(CLOSE_PAR);
				State = 1381; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Cte_table_nameContext[] cte_table_name() {
			return GetRuleContexts<Cte_table_nameContext>();
		}
		public Cte_table_nameContext cte_table_name(int i) {
			return GetRuleContext<Cte_table_nameContext>(i);
		}
		public ITerminalNode[] K_AS() { return GetTokens(SQLiteParser.K_AS); }
		public ITerminalNode K_AS(int i) {
			return GetToken(SQLiteParser.K_AS, i);
		}
		public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_with_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385; Match(K_WITH);
			State = 1387;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				State = 1386; Match(K_RECURSIVE);
				}
				break;
			}
			State = 1389; cte_table_name();
			State = 1390; Match(K_AS);
			State = 1391; Match(OPEN_PAR);
			State = 1392; select_stmt();
			State = 1393; Match(CLOSE_PAR);
			State = 1403;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1394; Match(COMMA);
				State = 1395; cte_table_name();
				State = 1396; Match(K_AS);
				State = 1397; Match(OPEN_PAR);
				State = 1398; select_stmt();
				State = 1399; Match(CLOSE_PAR);
				}
				}
				State = 1405;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_INDEXED() { return GetToken(SQLiteParser.K_INDEXED, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Qualified_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterQualified_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitQualified_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_table_nameContext qualified_table_name() {
		Qualified_table_nameContext _localctx = new Qualified_table_nameContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_qualified_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 1406; database_name();
				State = 1407; Match(DOT);
				}
				break;
			}
			State = 1411; table_name();
			State = 1417;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_INDEXED:
				{
				State = 1412; Match(K_INDEXED);
				State = 1413; Match(K_BY);
				State = 1414; index_name();
				}
				break;
			case K_NOT:
				{
				State = 1415; Match(K_NOT);
				State = 1416; Match(K_INDEXED);
				}
				break;
			case Eof:
			case SCOL:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CREATE:
			case K_DELETE:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXPLAIN:
			case K_INSERT:
			case K_LIMIT:
			case K_ORDER:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WHERE:
			case K_WITH:
			case UNEXPECTED_CHAR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419; expr(0);
			State = 1422;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 1420; Match(K_COLLATE);
				State = 1421; collation_name();
				}
			}

			State = 1425;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 1424;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_valueContext : ParserRuleContext {
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Pragma_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterPragma_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitPragma_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_valueContext pragma_value() {
		Pragma_valueContext _localctx = new Pragma_valueContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_pragma_value);
		try {
			State = 1430;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1427; signed_number();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1428; name();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1429; Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432; table_name();
			State = 1444;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1433; Match(OPEN_PAR);
				State = 1434; column_name();
				State = 1439;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1435; Match(COMMA);
					State = 1436; column_name();
					}
					}
					State = 1441;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1442; Match(CLOSE_PAR);
				}
			}

			State = 1446; Match(K_AS);
			State = 1447; Match(OPEN_PAR);
			State = 1448; select_stmt();
			State = 1449; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_result_column);
		int _la;
		try {
			State = 1463;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1451; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1452; table_name();
				State = 1453; Match(DOT);
				State = 1454; Match(STAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1456; expr(0);
				State = 1461;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1458;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_AS) {
						{
						State = 1457; Match(K_AS);
						}
					}

					State = 1460; column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode K_INDEXED() { return GetToken(SQLiteParser.K_INDEXED, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_or_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_or_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_table_or_subquery);
		int _la;
		try {
			State = 1512;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1468;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					State = 1465; database_name();
					State = 1466; Match(DOT);
					}
					break;
				}
				State = 1470; table_name();
				State = 1475;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					State = 1472;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,207,_ctx) ) {
					case 1:
						{
						State = 1471; Match(K_AS);
						}
						break;
					}
					State = 1474; table_alias();
					}
					break;
				}
				State = 1482;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_INDEXED:
					{
					State = 1477; Match(K_INDEXED);
					State = 1478; Match(K_BY);
					State = 1479; index_name();
					}
					break;
				case K_NOT:
					{
					State = 1480; Match(K_NOT);
					State = 1481; Match(K_INDEXED);
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case K_ALTER:
				case K_ANALYZE:
				case K_ATTACH:
				case K_BEGIN:
				case K_COMMIT:
				case K_CREATE:
				case K_CROSS:
				case K_DELETE:
				case K_DETACH:
				case K_DROP:
				case K_END:
				case K_EXCEPT:
				case K_EXPLAIN:
				case K_GROUP:
				case K_INNER:
				case K_INSERT:
				case K_INTERSECT:
				case K_JOIN:
				case K_LEFT:
				case K_LIMIT:
				case K_NATURAL:
				case K_ON:
				case K_ORDER:
				case K_PRAGMA:
				case K_REINDEX:
				case K_RELEASE:
				case K_REPLACE:
				case K_ROLLBACK:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_UNION:
				case K_UPDATE:
				case K_USING:
				case K_VACUUM:
				case K_VALUES:
				case K_WHERE:
				case K_WITH:
				case UNEXPECTED_CHAR:
					break;
				default:
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1484; Match(OPEN_PAR);
				State = 1494;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					State = 1485; table_or_subquery();
					State = 1490;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1486; Match(COMMA);
						State = 1487; table_or_subquery();
						}
						}
						State = 1492;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;

				case 2:
					{
					State = 1493; join_clause();
					}
					break;
				}
				State = 1496; Match(CLOSE_PAR);
				State = 1501;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
				case 1:
					{
					State = 1498;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
					case 1:
						{
						State = 1497; Match(K_AS);
						}
						break;
					}
					State = 1500; table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1503; Match(OPEN_PAR);
				State = 1504; select_stmt();
				State = 1505; Match(CLOSE_PAR);
				State = 1510;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
				case 1:
					{
					State = 1507;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
					case 1:
						{
						State = 1506; Match(K_AS);
						}
						break;
					}
					State = 1509; table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_operatorContext[] join_operator() {
			return GetRuleContexts<Join_operatorContext>();
		}
		public Join_operatorContext join_operator(int i) {
			return GetRuleContext<Join_operatorContext>(i);
		}
		public Join_constraintContext[] join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514; table_or_subquery();
			State = 1521;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA || _la==K_CROSS || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (K_INNER - 88)) | (1L << (K_JOIN - 88)) | (1L << (K_LEFT - 88)) | (1L << (K_NATURAL - 88)))) != 0)) {
				{
				{
				State = 1515; join_operator();
				State = 1516; table_or_subquery();
				State = 1517; join_constraint();
				}
				}
				State = 1523;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode K_JOIN() { return GetToken(SQLiteParser.K_JOIN, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SQLiteParser.K_NATURAL, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SQLiteParser.K_LEFT, 0); }
		public ITerminalNode K_INNER() { return GetToken(SQLiteParser.K_INNER, 0); }
		public ITerminalNode K_CROSS() { return GetToken(SQLiteParser.K_CROSS, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SQLiteParser.K_OUTER, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_join_operator);
		int _la;
		try {
			State = 1537;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1524; Match(COMMA);
				}
				break;
			case K_CROSS:
			case K_INNER:
			case K_JOIN:
			case K_LEFT:
			case K_NATURAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1526;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_NATURAL) {
					{
					State = 1525; Match(K_NATURAL);
					}
				}

				State = 1534;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_LEFT:
					{
					State = 1528; Match(K_LEFT);
					State = 1530;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_OUTER) {
						{
						State = 1529; Match(K_OUTER);
						}
					}

					}
					break;
				case K_INNER:
					{
					State = 1532; Match(K_INNER);
					}
					break;
				case K_CROSS:
					{
					State = 1533; Match(K_CROSS);
					}
					break;
				case K_JOIN:
					break;
				default:
					break;
				}
				State = 1536; Match(K_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_USING() { return GetToken(SQLiteParser.K_USING, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_join_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_ON:
				{
				State = 1539; Match(K_ON);
				State = 1540; expr(0);
				}
				break;
			case K_USING:
				{
				State = 1541; Match(K_USING);
				State = 1542; Match(OPEN_PAR);
				State = 1543; column_name();
				State = 1548;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1544; Match(COMMA);
					State = 1545; column_name();
					}
					}
					State = 1550;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1551; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case CLOSE_PAR:
			case COMMA:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CREATE:
			case K_CROSS:
			case K_DELETE:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXCEPT:
			case K_EXPLAIN:
			case K_GROUP:
			case K_INNER:
			case K_INSERT:
			case K_INTERSECT:
			case K_JOIN:
			case K_LEFT:
			case K_LIMIT:
			case K_NATURAL:
			case K_ORDER:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_UNION:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WHERE:
			case K_WITH:
			case UNEXPECTED_CHAR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(SQLiteParser.K_SELECT, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_GROUP() { return GetToken(SQLiteParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_HAVING() { return GetToken(SQLiteParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_core(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_select_core);
		int _la;
		try {
			State = 1629;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1555; Match(K_SELECT);
				State = 1557;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					State = 1556;
					_la = _input.La(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 1559; result_column();
				State = 1564;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1560; Match(COMMA);
					State = 1561; result_column();
					}
					}
					State = 1566;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1579;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_FROM) {
					{
					State = 1567; Match(K_FROM);
					State = 1577;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
					case 1:
						{
						State = 1568; table_or_subquery();
						State = 1573;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 1569; Match(COMMA);
							State = 1570; table_or_subquery();
							}
							}
							State = 1575;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;

					case 2:
						{
						State = 1576; join_clause();
						}
						break;
					}
					}
				}

				State = 1583;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_WHERE) {
					{
					State = 1581; Match(K_WHERE);
					State = 1582; expr(0);
					}
				}

				State = 1599;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_GROUP) {
					{
					State = 1585; Match(K_GROUP);
					State = 1586; Match(K_BY);
					State = 1587; expr(0);
					State = 1592;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1588; Match(COMMA);
						State = 1589; expr(0);
						}
						}
						State = 1594;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1597;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_HAVING) {
						{
						State = 1595; Match(K_HAVING);
						State = 1596; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1601; Match(K_VALUES);
				State = 1602; Match(OPEN_PAR);
				State = 1603; expr(0);
				State = 1608;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1604; Match(COMMA);
					State = 1605; expr(0);
					}
					}
					State = 1610;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1611; Match(CLOSE_PAR);
				State = 1626;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1612; Match(COMMA);
					State = 1613; Match(OPEN_PAR);
					State = 1614; expr(0);
					State = 1619;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1615; Match(COMMA);
						State = 1616; expr(0);
						}
						}
						State = 1621;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1622; Match(CLOSE_PAR);
					}
					}
					State = 1628;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_operatorContext : ParserRuleContext {
		public ITerminalNode K_UNION() { return GetToken(SQLiteParser.K_UNION, 0); }
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SQLiteParser.K_INTERSECT, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SQLiteParser.K_EXCEPT, 0); }
		public Compound_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCompound_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCompound_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_operatorContext compound_operator() {
		Compound_operatorContext _localctx = new Compound_operatorContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_compound_operator);
		try {
			State = 1636;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1631; Match(K_UNION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1632; Match(K_UNION);
				State = 1633; Match(K_ALL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1634; Match(K_INTERSECT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1635; Match(K_EXCEPT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Cte_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCte_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCte_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCte_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cte_table_nameContext cte_table_name() {
		Cte_table_nameContext _localctx = new Cte_table_nameContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_cte_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638; table_name();
			State = 1650;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1639; Match(OPEN_PAR);
				State = 1640; column_name();
				State = 1645;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1641; Match(COMMA);
					State = 1642; column_name();
					}
					}
					State = 1647;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1648; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1652;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 1655; Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public ITerminalNode BLOB_LITERAL() { return GetToken(SQLiteParser.BLOB_LITERAL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SQLiteParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SQLiteParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (K_NULL - 105)) | (1L << (NUMERIC_LITERAL - 105)) | (1L << (STRING_LITERAL - 105)) | (1L << (BLOB_LITERAL - 105)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1659;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TILDE))) != 0) || _la==K_NOT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterError_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitError_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterModule_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitModule_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_module_argument);
		try {
			State = 1665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1663; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1664; column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1667;
			_la = _input.La(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_ACTION() { return GetToken(SQLiteParser.K_ACTION, 0); }
		public ITerminalNode K_ADD() { return GetToken(SQLiteParser.K_ADD, 0); }
		public ITerminalNode K_AFTER() { return GetToken(SQLiteParser.K_AFTER, 0); }
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public ITerminalNode K_ALTER() { return GetToken(SQLiteParser.K_ALTER, 0); }
		public ITerminalNode K_ANALYZE() { return GetToken(SQLiteParser.K_ANALYZE, 0); }
		public ITerminalNode K_AND() { return GetToken(SQLiteParser.K_AND, 0); }
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public ITerminalNode K_ATTACH() { return GetToken(SQLiteParser.K_ATTACH, 0); }
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SQLiteParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_BEFORE() { return GetToken(SQLiteParser.K_BEFORE, 0); }
		public ITerminalNode K_BEGIN() { return GetToken(SQLiteParser.K_BEGIN, 0); }
		public ITerminalNode K_BETWEEN() { return GetToken(SQLiteParser.K_BETWEEN, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_CASCADE() { return GetToken(SQLiteParser.K_CASCADE, 0); }
		public ITerminalNode K_CASE() { return GetToken(SQLiteParser.K_CASE, 0); }
		public ITerminalNode K_CAST() { return GetToken(SQLiteParser.K_CAST, 0); }
		public ITerminalNode K_CHECK() { return GetToken(SQLiteParser.K_CHECK, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public ITerminalNode K_COLUMN() { return GetToken(SQLiteParser.K_COLUMN, 0); }
		public ITerminalNode K_COMMIT() { return GetToken(SQLiteParser.K_COMMIT, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SQLiteParser.K_CONFLICT, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(SQLiteParser.K_CONSTRAINT, 0); }
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_CROSS() { return GetToken(SQLiteParser.K_CROSS, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SQLiteParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SQLiteParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0); }
		public ITerminalNode K_DATABASE() { return GetToken(SQLiteParser.K_DATABASE, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(SQLiteParser.K_DEFAULT, 0); }
		public ITerminalNode K_DEFERRABLE() { return GetToken(SQLiteParser.K_DEFERRABLE, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SQLiteParser.K_DEFERRED, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public ITerminalNode K_DETACH() { return GetToken(SQLiteParser.K_DETACH, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_EACH() { return GetToken(SQLiteParser.K_EACH, 0); }
		public ITerminalNode K_ELSE() { return GetToken(SQLiteParser.K_ELSE, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(SQLiteParser.K_ESCAPE, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SQLiteParser.K_EXCEPT, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SQLiteParser.K_EXCLUSIVE, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_EXPLAIN() { return GetToken(SQLiteParser.K_EXPLAIN, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_FOR() { return GetToken(SQLiteParser.K_FOR, 0); }
		public ITerminalNode K_FOREIGN() { return GetToken(SQLiteParser.K_FOREIGN, 0); }
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public ITerminalNode K_FULL() { return GetToken(SQLiteParser.K_FULL, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SQLiteParser.K_GLOB, 0); }
		public ITerminalNode K_GROUP() { return GetToken(SQLiteParser.K_GROUP, 0); }
		public ITerminalNode K_HAVING() { return GetToken(SQLiteParser.K_HAVING, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SQLiteParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_IN() { return GetToken(SQLiteParser.K_IN, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SQLiteParser.K_INDEX, 0); }
		public ITerminalNode K_INDEXED() { return GetToken(SQLiteParser.K_INDEXED, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(SQLiteParser.K_INITIALLY, 0); }
		public ITerminalNode K_INNER() { return GetToken(SQLiteParser.K_INNER, 0); }
		public ITerminalNode K_INSERT() { return GetToken(SQLiteParser.K_INSERT, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(SQLiteParser.K_INSTEAD, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SQLiteParser.K_INTERSECT, 0); }
		public ITerminalNode K_INTO() { return GetToken(SQLiteParser.K_INTO, 0); }
		public ITerminalNode K_IS() { return GetToken(SQLiteParser.K_IS, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(SQLiteParser.K_ISNULL, 0); }
		public ITerminalNode K_JOIN() { return GetToken(SQLiteParser.K_JOIN, 0); }
		public ITerminalNode K_KEY() { return GetToken(SQLiteParser.K_KEY, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SQLiteParser.K_LEFT, 0); }
		public ITerminalNode K_LIKE() { return GetToken(SQLiteParser.K_LIKE, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SQLiteParser.K_MATCH, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SQLiteParser.K_NATURAL, 0); }
		public ITerminalNode K_NO() { return GetToken(SQLiteParser.K_NO, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SQLiteParser.K_NOTNULL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ITerminalNode K_OF() { return GetToken(SQLiteParser.K_OF, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SQLiteParser.K_OUTER, 0); }
		public ITerminalNode K_PLAN() { return GetToken(SQLiteParser.K_PLAN, 0); }
		public ITerminalNode K_PRAGMA() { return GetToken(SQLiteParser.K_PRAGMA, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(SQLiteParser.K_PRIMARY, 0); }
		public ITerminalNode K_QUERY() { return GetToken(SQLiteParser.K_QUERY, 0); }
		public ITerminalNode K_RAISE() { return GetToken(SQLiteParser.K_RAISE, 0); }
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_REFERENCES() { return GetToken(SQLiteParser.K_REFERENCES, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SQLiteParser.K_REGEXP, 0); }
		public ITerminalNode K_REINDEX() { return GetToken(SQLiteParser.K_REINDEX, 0); }
		public ITerminalNode K_RELEASE() { return GetToken(SQLiteParser.K_RELEASE, 0); }
		public ITerminalNode K_RENAME() { return GetToken(SQLiteParser.K_RENAME, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_RESTRICT() { return GetToken(SQLiteParser.K_RESTRICT, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(SQLiteParser.K_RIGHT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ROW() { return GetToken(SQLiteParser.K_ROW, 0); }
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public ITerminalNode K_SELECT() { return GetToken(SQLiteParser.K_SELECT, 0); }
		public ITerminalNode K_SET() { return GetToken(SQLiteParser.K_SET, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public ITerminalNode K_THEN() { return GetToken(SQLiteParser.K_THEN, 0); }
		public ITerminalNode K_TO() { return GetToken(SQLiteParser.K_TO, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SQLiteParser.K_TRIGGER, 0); }
		public ITerminalNode K_UNION() { return GetToken(SQLiteParser.K_UNION, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public ITerminalNode K_USING() { return GetToken(SQLiteParser.K_USING, 0); }
		public ITerminalNode K_VACUUM() { return GetToken(SQLiteParser.K_VACUUM, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SQLiteParser.K_VIEW, 0); }
		public ITerminalNode K_VIRTUAL() { return GetToken(SQLiteParser.K_VIRTUAL, 0); }
		public ITerminalNode K_WHEN() { return GetToken(SQLiteParser.K_WHEN, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public ITerminalNode K_WITHOUT() { return GetToken(SQLiteParser.K_WITHOUT, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669;
			_la = _input.La(1);
			if ( !(((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (K_ABORT - 26)) | (1L << (K_ACTION - 26)) | (1L << (K_ADD - 26)) | (1L << (K_AFTER - 26)) | (1L << (K_ALL - 26)) | (1L << (K_ALTER - 26)) | (1L << (K_ANALYZE - 26)) | (1L << (K_AND - 26)) | (1L << (K_AS - 26)) | (1L << (K_ASC - 26)) | (1L << (K_ATTACH - 26)) | (1L << (K_AUTOINCREMENT - 26)) | (1L << (K_BEFORE - 26)) | (1L << (K_BEGIN - 26)) | (1L << (K_BETWEEN - 26)) | (1L << (K_BY - 26)) | (1L << (K_CASCADE - 26)) | (1L << (K_CASE - 26)) | (1L << (K_CAST - 26)) | (1L << (K_CHECK - 26)) | (1L << (K_COLLATE - 26)) | (1L << (K_COLUMN - 26)) | (1L << (K_COMMIT - 26)) | (1L << (K_CONFLICT - 26)) | (1L << (K_CONSTRAINT - 26)) | (1L << (K_CREATE - 26)) | (1L << (K_CROSS - 26)) | (1L << (K_CURRENT_DATE - 26)) | (1L << (K_CURRENT_TIME - 26)) | (1L << (K_CURRENT_TIMESTAMP - 26)) | (1L << (K_DATABASE - 26)) | (1L << (K_DEFAULT - 26)) | (1L << (K_DEFERRABLE - 26)) | (1L << (K_DEFERRED - 26)) | (1L << (K_DELETE - 26)) | (1L << (K_DESC - 26)) | (1L << (K_DETACH - 26)) | (1L << (K_DISTINCT - 26)) | (1L << (K_DROP - 26)) | (1L << (K_EACH - 26)) | (1L << (K_ELSE - 26)) | (1L << (K_END - 26)) | (1L << (K_ESCAPE - 26)) | (1L << (K_EXCEPT - 26)) | (1L << (K_EXCLUSIVE - 26)) | (1L << (K_EXISTS - 26)) | (1L << (K_EXPLAIN - 26)) | (1L << (K_FAIL - 26)) | (1L << (K_FOR - 26)) | (1L << (K_FOREIGN - 26)) | (1L << (K_FROM - 26)) | (1L << (K_FULL - 26)) | (1L << (K_GLOB - 26)) | (1L << (K_GROUP - 26)) | (1L << (K_HAVING - 26)) | (1L << (K_IF - 26)) | (1L << (K_IGNORE - 26)) | (1L << (K_IMMEDIATE - 26)) | (1L << (K_IN - 26)) | (1L << (K_INDEX - 26)) | (1L << (K_INDEXED - 26)) | (1L << (K_INITIALLY - 26)) | (1L << (K_INNER - 26)) | (1L << (K_INSERT - 26)))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (K_INSTEAD - 90)) | (1L << (K_INTERSECT - 90)) | (1L << (K_INTO - 90)) | (1L << (K_IS - 90)) | (1L << (K_ISNULL - 90)) | (1L << (K_JOIN - 90)) | (1L << (K_KEY - 90)) | (1L << (K_LEFT - 90)) | (1L << (K_LIKE - 90)) | (1L << (K_LIMIT - 90)) | (1L << (K_MATCH - 90)) | (1L << (K_NATURAL - 90)) | (1L << (K_NO - 90)) | (1L << (K_NOT - 90)) | (1L << (K_NOTNULL - 90)) | (1L << (K_NULL - 90)) | (1L << (K_OF - 90)) | (1L << (K_OFFSET - 90)) | (1L << (K_ON - 90)) | (1L << (K_OR - 90)) | (1L << (K_ORDER - 90)) | (1L << (K_OUTER - 90)) | (1L << (K_PLAN - 90)) | (1L << (K_PRAGMA - 90)) | (1L << (K_PRIMARY - 90)) | (1L << (K_QUERY - 90)) | (1L << (K_RAISE - 90)) | (1L << (K_RECURSIVE - 90)) | (1L << (K_REFERENCES - 90)) | (1L << (K_REGEXP - 90)) | (1L << (K_REINDEX - 90)) | (1L << (K_RELEASE - 90)) | (1L << (K_RENAME - 90)) | (1L << (K_REPLACE - 90)) | (1L << (K_RESTRICT - 90)) | (1L << (K_RIGHT - 90)) | (1L << (K_ROLLBACK - 90)) | (1L << (K_ROW - 90)) | (1L << (K_SAVEPOINT - 90)) | (1L << (K_SELECT - 90)) | (1L << (K_SET - 90)) | (1L << (K_TABLE - 90)) | (1L << (K_TEMP - 90)) | (1L << (K_TEMPORARY - 90)) | (1L << (K_THEN - 90)) | (1L << (K_TO - 90)) | (1L << (K_TRANSACTION - 90)) | (1L << (K_TRIGGER - 90)) | (1L << (K_UNION - 90)) | (1L << (K_UNIQUE - 90)) | (1L << (K_UPDATE - 90)) | (1L << (K_USING - 90)) | (1L << (K_VACUUM - 90)) | (1L << (K_VALUES - 90)) | (1L << (K_VIEW - 90)) | (1L << (K_VIRTUAL - 90)) | (1L << (K_WHEN - 90)) | (1L << (K_WHERE - 90)) | (1L << (K_WITH - 90)) | (1L << (K_WITHOUT - 90)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1671; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1673; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDatabase_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDatabase_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_nameContext database_name() {
		Database_nameContext _localctx = new Database_nameContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_database_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1675; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1677; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_or_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_or_index_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_or_index_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_index_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_index_nameContext table_or_index_name() {
		Table_or_index_nameContext _localctx = new Table_or_index_nameContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_table_or_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1679; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public New_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterNew_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitNew_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_table_nameContext new_table_name() {
		New_table_nameContext _localctx = new New_table_nameContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_new_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1683; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1685; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterForeign_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitForeign_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1689; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTrigger_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTrigger_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1691; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1693; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterPragma_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitPragma_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1697; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSavepoint_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSavepoint_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1699; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1701; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Transaction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTransaction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTransaction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_nameContext transaction_name() {
		Transaction_nameContext _localctx = new Transaction_nameContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_transaction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1703; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_any_name);
		try {
			State = 1712;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1705; Match(IDENTIFIER);
				}
				break;
			case K_ABORT:
			case K_ACTION:
			case K_ADD:
			case K_AFTER:
			case K_ALL:
			case K_ALTER:
			case K_ANALYZE:
			case K_AND:
			case K_AS:
			case K_ASC:
			case K_ATTACH:
			case K_AUTOINCREMENT:
			case K_BEFORE:
			case K_BEGIN:
			case K_BETWEEN:
			case K_BY:
			case K_CASCADE:
			case K_CASE:
			case K_CAST:
			case K_CHECK:
			case K_COLLATE:
			case K_COLUMN:
			case K_COMMIT:
			case K_CONFLICT:
			case K_CONSTRAINT:
			case K_CREATE:
			case K_CROSS:
			case K_CURRENT_DATE:
			case K_CURRENT_TIME:
			case K_CURRENT_TIMESTAMP:
			case K_DATABASE:
			case K_DEFAULT:
			case K_DEFERRABLE:
			case K_DEFERRED:
			case K_DELETE:
			case K_DESC:
			case K_DETACH:
			case K_DISTINCT:
			case K_DROP:
			case K_EACH:
			case K_ELSE:
			case K_END:
			case K_ESCAPE:
			case K_EXCEPT:
			case K_EXCLUSIVE:
			case K_EXISTS:
			case K_EXPLAIN:
			case K_FAIL:
			case K_FOR:
			case K_FOREIGN:
			case K_FROM:
			case K_FULL:
			case K_GLOB:
			case K_GROUP:
			case K_HAVING:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IN:
			case K_INDEX:
			case K_INDEXED:
			case K_INITIALLY:
			case K_INNER:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERSECT:
			case K_INTO:
			case K_IS:
			case K_ISNULL:
			case K_JOIN:
			case K_KEY:
			case K_LEFT:
			case K_LIKE:
			case K_LIMIT:
			case K_MATCH:
			case K_NATURAL:
			case K_NO:
			case K_NOT:
			case K_NOTNULL:
			case K_NULL:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_OR:
			case K_ORDER:
			case K_OUTER:
			case K_PLAN:
			case K_PRAGMA:
			case K_PRIMARY:
			case K_QUERY:
			case K_RAISE:
			case K_RECURSIVE:
			case K_REFERENCES:
			case K_REGEXP:
			case K_REINDEX:
			case K_RELEASE:
			case K_RENAME:
			case K_REPLACE:
			case K_RESTRICT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_TABLE:
			case K_TEMP:
			case K_TEMPORARY:
			case K_THEN:
			case K_TO:
			case K_TRANSACTION:
			case K_TRIGGER:
			case K_UNION:
			case K_UNIQUE:
			case K_UPDATE:
			case K_USING:
			case K_VACUUM:
			case K_VALUES:
			case K_VIEW:
			case K_VIRTUAL:
			case K_WHEN:
			case K_WHERE:
			case K_WITH:
			case K_WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1706; keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1707; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1708; Match(OPEN_PAR);
				State = 1709; any_name();
				State = 1710; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 39: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 18);

		case 1: return Precpred(_ctx, 17);

		case 2: return Precpred(_ctx, 16);

		case 3: return Precpred(_ctx, 15);

		case 4: return Precpred(_ctx, 14);

		case 5: return Precpred(_ctx, 13);

		case 6: return Precpred(_ctx, 12);

		case 7: return Precpred(_ctx, 11);

		case 8: return Precpred(_ctx, 5);

		case 9: return Precpred(_ctx, 4);

		case 10: return Precpred(_ctx, 7);

		case 11: return Precpred(_ctx, 6);

		case 12: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xA0\x6B5\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x3\x2\x3\x2\a\x2\xA9\n\x2\f\x2\xE"+
		"\x2\xAC\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\a\x4\xB4\n\x4\f\x4\xE"+
		"\x4\xB7\v\x4\x3\x4\x3\x4\x6\x4\xBB\n\x4\r\x4\xE\x4\xBC\x3\x4\a\x4\xC0"+
		"\n\x4\f\x4\xE\x4\xC3\v\x4\x3\x4\a\x4\xC6\n\x4\f\x4\xE\x4\xC9\v\x4\x3\x5"+
		"\x3\x5\x3\x5\x5\x5\xCE\n\x5\x5\x5\xD0\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x5\x5\xF0\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xF7"+
		"\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xFF\n\x6\x3\x6\x5\x6\x102"+
		"\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x10B\n\a\x3\b\x3\b\x5\b"+
		"\x10F\n\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x5\t\x117\n\t\x3\t\x3\t\x5\t\x11B"+
		"\n\t\x5\t\x11D\n\t\x3\n\x3\n\x3\n\x5\n\x122\n\n\x5\n\x124\n\n\x3\v\x3"+
		"\v\x5\v\x128\n\v\x3\v\x3\v\x3\v\a\v\x12D\n\v\f\v\xE\v\x130\v\v\x5\v\x132"+
		"\n\v\x3\v\x3\v\x3\v\x5\v\x137\n\v\x3\v\x3\v\x5\v\x13B\n\v\x3\v\x6\v\x13E"+
		"\n\v\r\v\xE\v\x13F\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x147\n\v\f\v\xE\v\x14A"+
		"\v\v\x5\v\x14C\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x152\n\v\x5\v\x154\n\v\x3"+
		"\f\x3\f\x5\f\x158\n\f\x3\f\x3\f\x3\f\x3\f\x5\f\x15E\n\f\x3\f\x3\f\x3\f"+
		"\x5\f\x163\n\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x16C\n\f\f\f\xE"+
		"\f\x16F\v\f\x3\f\x3\f\x3\f\x5\f\x174\n\f\x3\r\x3\r\x5\r\x178\n\r\x3\r"+
		"\x3\r\x3\r\x3\r\x5\r\x17E\n\r\x3\r\x3\r\x3\r\x5\r\x183\n\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\a\r\x18A\n\r\f\r\xE\r\x18D\v\r\x3\r\x3\r\a\r\x191\n\r\f\r"+
		"\xE\r\x194\v\r\x3\r\x3\r\x3\r\x5\r\x199\n\r\x3\r\x3\r\x5\r\x19D\n\r\x3"+
		"\xE\x3\xE\x5\xE\x1A1\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x1A7\n\xE\x3\xE"+
		"\x3\xE\x3\xE\x5\xE\x1AC\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x1B3"+
		"\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x1BC\n\xE\f\xE\xE"+
		"\xE\x1BF\v\xE\x5\xE\x1C1\n\xE\x5\xE\x1C3\n\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x5\xE\x1C9\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x1CF\n\xE\x3\xE\x3\xE\x5"+
		"\xE\x1D3\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x1DA\n\xE\x3\xE\x3\xE"+
		"\x6\xE\x1DE\n\xE\r\xE\xE\xE\x1DF\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\x1E6\n"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x1EC\n\xF\x3\xF\x3\xF\x3\xF\x5\xF\x1F1"+
		"\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x5\x10\x1FD\n\x10\x3\x10\x3\x10\x3\x10\x5\x10\x202\n\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x20B\n\x10\f\x10\xE\x10\x20E"+
		"\v\x10\x3\x10\x3\x10\x5\x10\x212\n\x10\x3\x11\x5\x11\x215\n\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x21C\n\x11\x3\x12\x5\x12\x21F\n\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x226\n\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\a\x12\x22D\n\x12\f\x12\xE\x12\x230\v\x12\x5\x12\x232"+
		"\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x238\n\x12\x5\x12\x23A\n\x12"+
		"\x3\x13\x3\x13\x5\x13\x23E\n\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x246\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x24B\n\x14\x3\x14\x3"+
		"\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x253\n\x15\x3\x15\x3\x15\x3\x15"+
		"\x5\x15\x258\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x260"+
		"\n\x16\x3\x16\x3\x16\x3\x16\x5\x16\x265\n\x16\x3\x16\x3\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x5\x17\x26D\n\x17\x3\x17\x3\x17\x3\x17\x5\x17\x272"+
		"\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x278\n\x18\x3\x18\x3\x18\x3"+
		"\x18\a\x18\x27D\n\x18\f\x18\xE\x18\x280\v\x18\x5\x18\x282\n\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\a\x18\x288\n\x18\f\x18\xE\x18\x28B\v\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x292\n\x18\f\x18\xE\x18\x295\v\x18"+
		"\x5\x18\x297\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x29D\n\x18\x5\x18"+
		"\x29F\n\x18\x3\x19\x5\x19\x2A2\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x5\x19\x2B5\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2BB"+
		"\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x2C2\n\x19\f\x19\xE\x19"+
		"\x2C5\v\x19\x3\x19\x3\x19\x5\x19\x2C9\n\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\a\x19\x2D0\n\x19\f\x19\xE\x19\x2D3\v\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\a\x19\x2DB\n\x19\f\x19\xE\x19\x2DE\v\x19\x3\x19"+
		"\x3\x19\a\x19\x2E2\n\x19\f\x19\xE\x19\x2E5\v\x19\x3\x19\x3\x19\x3\x19"+
		"\x5\x19\x2EA\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2F0\n\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2F9\n\x1A\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x300\n\x1B\x3\x1B\x3\x1B\x5\x1B\x304"+
		"\n\x1B\x5\x1B\x306\n\x1B\x3\x1C\x3\x1C\x5\x1C\x30A\n\x1C\x3\x1C\x3\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x311\n\x1D\x5\x1D\x313\n\x1D\x3\x1D\x3\x1D"+
		"\x5\x1D\x317\n\x1D\x3\x1D\x5\x1D\x31A\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x5\x1F\x321\n\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x326\n\x1F\f\x1F"+
		"\xE\x1F\x329\v\x1F\x5\x1F\x32B\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\a\x1F\x333\n\x1F\f\x1F\xE\x1F\x336\v\x1F\x5\x1F\x338\n\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x33E\n\x1F\x5\x1F\x340\n\x1F\x3 \x3 "+
		"\x5 \x344\n \x3 \x3 \x3 \a \x349\n \f \xE \x34C\v \x5 \x34E\n \x3 \x3"+
		" \x3 \x3 \a \x354\n \f \xE \x357\v \x3 \x3 \x3 \x3 \x3 \a \x35E\n \f "+
		"\xE \x361\v \x5 \x363\n \x3 \x3 \x3 \x3 \x5 \x369\n \x5 \x36B\n \x3!\x3"+
		"!\x5!\x36F\n!\x3!\x3!\x3!\a!\x374\n!\f!\xE!\x377\v!\x3!\x3!\x3!\x3!\a"+
		"!\x37D\n!\f!\xE!\x380\v!\x3!\x5!\x383\n!\x5!\x385\n!\x3!\x3!\x5!\x389"+
		"\n!\x3!\x3!\x3!\x3!\x3!\a!\x390\n!\f!\xE!\x393\v!\x3!\x3!\x5!\x397\n!"+
		"\x5!\x399\n!\x3!\x3!\x3!\x3!\x3!\a!\x3A0\n!\f!\xE!\x3A3\v!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\a!\x3AB\n!\f!\xE!\x3AE\v!\x3!\x3!\a!\x3B2\n!\f!\xE!\x3B5"+
		"\v!\x5!\x3B7\n!\x3\"\x5\"\x3BA\n\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x5\"\x3C7\n\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\a\"\x3D3\n\"\f\"\xE\"\x3D6\v\"\x3\"\x3\"\x5\"\x3DA\n\""+
		"\x3#\x5#\x3DD\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x3EA"+
		"\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\a#\x3F6\n#\f#\xE#\x3F9\v#"+
		"\x3#\x3#\x5#\x3FD\n#\x3#\x3#\x3#\x3#\x3#\a#\x404\n#\f#\xE#\x407\v#\x5"+
		"#\x409\n#\x3#\x3#\x3#\x3#\x5#\x40F\n#\x5#\x411\n#\x3$\x3$\x3%\x3%\x5%"+
		"\x417\n%\x3%\a%\x41A\n%\f%\xE%\x41D\v%\x3&\x6&\x420\n&\r&\xE&\x421\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x42E\n&\x3\'\x3\'\x5\'\x432"+
		"\n\'\x3\'\x3\'\x3\'\x5\'\x437\n\'\x3\'\x3\'\x5\'\x43B\n\'\x3\'\x5\'\x43E"+
		"\n\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'"+
		"\x3\'\x3\'\x3\'\x5\'\x450\n\'\x3\'\x3\'\x3\'\x5\'\x455\n\'\x3(\x3(\x3"+
		"(\x5(\x45A\n(\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x462\n)\x3)\x3)\x3)\x5)\x467"+
		"\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x470\n)\x3)\x3)\x3)\a)\x475\n)\f)"+
		"\xE)\x478\v)\x3)\x5)\x47B\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x5)\x48B\n)\x3)\x5)\x48E\n)\x3)\x3)\x3)\x3)\x3)\x3)\x5)"+
		"\x496\n)\x3)\x3)\x3)\x3)\x3)\x6)\x49D\n)\r)\xE)\x49E\x3)\x3)\x5)\x4A3"+
		"\n)\x3)\x3)\x5)\x4A7\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x4C4"+
		"\n)\x3)\x3)\x3)\x5)\x4C9\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x4D2\n)\x3"+
		")\x3)\x3)\x3)\x5)\x4D8\n)\x3)\x3)\x3)\x3)\x3)\x5)\x4DF\n)\x3)\x3)\x5)"+
		"\x4E3\n)\x3)\x3)\x3)\x3)\x3)\x3)\a)\x4EB\n)\f)\xE)\x4EE\v)\x5)\x4F0\n"+
		")\x3)\x3)\x3)\x3)\x5)\x4F6\n)\x3)\x5)\x4F9\n)\a)\x4FB\n)\f)\xE)\x4FE\v"+
		")\x3*\x3*\x3*\x3*\x3*\x3*\a*\x506\n*\f*\xE*\x509\v*\x3*\x3*\x5*\x50D\n"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x519\n*\x3*\x3*\x5*\x51D"+
		"\n*\a*\x51F\n*\f*\xE*\x522\v*\x3*\x5*\x525\n*\x3*\x3*\x3*\x3*\x3*\x5*"+
		"\x52C\n*\x5*\x52E\n*\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x536\n+\x3+\x3+\x3,\x3"+
		",\x3,\x5,\x53D\n,\x3,\x5,\x540\n,\x3-\x3-\x5-\x544\n-\x3-\x3-\x3-\x5-"+
		"\x549\n-\x3-\x3-\x3-\x3-\a-\x54F\n-\f-\xE-\x552\v-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\a-\x562\n-\f-\xE-\x565\v-\x3-\x3"+
		"-\x3-\x5-\x56A\n-\x3.\x3.\x5.\x56E\n.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3."+
		"\x3.\x3.\x3.\x3.\a.\x57C\n.\f.\xE.\x57F\v.\x3/\x3/\x3/\x5/\x584\n/\x3"+
		"/\x3/\x3/\x3/\x3/\x3/\x5/\x58C\n/\x3\x30\x3\x30\x3\x30\x5\x30\x591\n\x30"+
		"\x3\x30\x5\x30\x594\n\x30\x3\x31\x3\x31\x3\x31\x5\x31\x599\n\x31\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x5A0\n\x32\f\x32\xE\x32\x5A3\v\x32"+
		"\x3\x32\x3\x32\x5\x32\x5A7\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3"+
		"\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x5B5\n\x33\x3\x33"+
		"\x5\x33\x5B8\n\x33\x5\x33\x5BA\n\x33\x3\x34\x3\x34\x3\x34\x5\x34\x5BF"+
		"\n\x34\x3\x34\x3\x34\x5\x34\x5C3\n\x34\x3\x34\x5\x34\x5C6\n\x34\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x5CD\n\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\a\x34\x5D3\n\x34\f\x34\xE\x34\x5D6\v\x34\x3\x34\x5\x34\x5D9\n\x34"+
		"\x3\x34\x3\x34\x5\x34\x5DD\n\x34\x3\x34\x5\x34\x5E0\n\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x34\x5\x34\x5E6\n\x34\x3\x34\x5\x34\x5E9\n\x34\x5\x34\x5EB"+
		"\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x5F2\n\x35\f\x35\xE\x35"+
		"\x5F5\v\x35\x3\x36\x3\x36\x5\x36\x5F9\n\x36\x3\x36\x3\x36\x5\x36\x5FD"+
		"\n\x36\x3\x36\x3\x36\x5\x36\x601\n\x36\x3\x36\x5\x36\x604\n\x36\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\a\x37\x60D\n\x37\f\x37\xE\x37"+
		"\x610\v\x37\x3\x37\x3\x37\x5\x37\x614\n\x37\x3\x38\x3\x38\x5\x38\x618"+
		"\n\x38\x3\x38\x3\x38\x3\x38\a\x38\x61D\n\x38\f\x38\xE\x38\x620\v\x38\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\a\x38\x626\n\x38\f\x38\xE\x38\x629\v\x38\x3"+
		"\x38\x5\x38\x62C\n\x38\x5\x38\x62E\n\x38\x3\x38\x3\x38\x5\x38\x632\n\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\a\x38\x639\n\x38\f\x38\xE\x38\x63C"+
		"\v\x38\x3\x38\x3\x38\x5\x38\x640\n\x38\x5\x38\x642\n\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\a\x38\x649\n\x38\f\x38\xE\x38\x64C\v\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\a\x38\x654\n\x38\f\x38\xE\x38\x657"+
		"\v\x38\x3\x38\x3\x38\a\x38\x65B\n\x38\f\x38\xE\x38\x65E\v\x38\x5\x38\x660"+
		"\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x667\n\x39\x3:\x3:\x3"+
		":\x3:\x3:\a:\x66E\n:\f:\xE:\x671\v:\x3:\x3:\x5:\x675\n:\x3;\x5;\x678\n"+
		";\x3;\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x3?\x3?\x5?\x684\n?\x3@\x3@\x3\x41\x3"+
		"\x41\x3\x42\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3"+
		"\x46\x3G\x3G\x3H\x3H\x3I\x3I\x3J\x3J\x3K\x3K\x3L\x3L\x3M\x3M\x3N\x3N\x3"+
		"O\x3O\x3P\x3P\x3Q\x3Q\x3R\x3R\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x6B3\nS"+
		"\x3S\x2\x2\x3PT\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46"+
		"\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2"+
		"\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2"+
		"\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2"+
		"\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\x2\x15\x5\x2==HHUU\x4"+
		"\x2\x32\x32\x45\x45\x4\x2\b\bmm\x3\x2\x86\x87\x4\x2  \x41\x41\x4\x2%%"+
		"??\a\x2\x1C\x1CKKTT}}\x80\x80\x4\x2\n\n\xF\x10\x3\x2\v\f\x3\x2\x11\x14"+
		"\x3\x2\x15\x18\v\x2\x3\x3\t\t\x19\x1BPPVV__\x64\x64\x66\x66yy\x6\x2PP"+
		"\x64\x64\x66\x66yy\x4\x2>>\x8E\x8E\x5\x2\x1C\x1CKK\x80\x80\x6\x2\x37\x39"+
		"kk\x99\x99\x9B\x9C\x4\x2\v\rii\x4\x2\x98\x98\x9B\x9B\x3\x2\x1C\x97\x7B6"+
		"\x2\xAA\x3\x2\x2\x2\x4\xAF\x3\x2\x2\x2\x6\xB5\x3\x2\x2\x2\b\xCF\x3\x2"+
		"\x2\x2\n\xF1\x3\x2\x2\x2\f\x103\x3\x2\x2\x2\xE\x10C\x3\x2\x2\x2\x10\x114"+
		"\x3\x2\x2\x2\x12\x11E\x3\x2\x2\x2\x14\x131\x3\x2\x2\x2\x16\x155\x3\x2"+
		"\x2\x2\x18\x175\x3\x2\x2\x2\x1A\x19E\x3\x2\x2\x2\x1C\x1E3\x3\x2\x2\x2"+
		"\x1E\x1F6\x3\x2\x2\x2 \x214\x3\x2\x2\x2\"\x21E\x3\x2\x2\x2$\x23B\x3\x2"+
		"\x2\x2&\x241\x3\x2\x2\x2(\x24E\x3\x2\x2\x2*\x25B\x3\x2\x2\x2,\x268\x3"+
		"\x2\x2\x2.\x281\x3\x2\x2\x2\x30\x2A1\x3\x2\x2\x2\x32\x2EB\x3\x2\x2\x2"+
		"\x34\x2FA\x3\x2\x2\x2\x36\x307\x3\x2\x2\x2\x38\x30D\x3\x2\x2\x2:\x31B"+
		"\x3\x2\x2\x2<\x32A\x3\x2\x2\x2>\x34D\x3\x2\x2\x2@\x3B6\x3\x2\x2\x2\x42"+
		"\x3B9\x3\x2\x2\x2\x44\x3DC\x3\x2\x2\x2\x46\x412\x3\x2\x2\x2H\x414\x3\x2"+
		"\x2\x2J\x41F\x3\x2\x2\x2L\x431\x3\x2\x2\x2N\x459\x3\x2\x2\x2P\x4A6\x3"+
		"\x2\x2\x2R\x4FF\x3\x2\x2\x2T\x52F\x3\x2\x2\x2V\x539\x3\x2\x2\x2X\x543"+
		"\x3\x2\x2\x2Z\x56B\x3\x2\x2\x2\\\x583\x3\x2\x2\x2^\x58D\x3\x2\x2\x2`\x598"+
		"\x3\x2\x2\x2\x62\x59A\x3\x2\x2\x2\x64\x5B9\x3\x2\x2\x2\x66\x5EA\x3\x2"+
		"\x2\x2h\x5EC\x3\x2\x2\x2j\x603\x3\x2\x2\x2l\x613\x3\x2\x2\x2n\x65F\x3"+
		"\x2\x2\x2p\x666\x3\x2\x2\x2r\x668\x3\x2\x2\x2t\x677\x3\x2\x2\x2v\x67B"+
		"\x3\x2\x2\x2x\x67D\x3\x2\x2\x2z\x67F\x3\x2\x2\x2|\x683\x3\x2\x2\x2~\x685"+
		"\x3\x2\x2\x2\x80\x687\x3\x2\x2\x2\x82\x689\x3\x2\x2\x2\x84\x68B\x3\x2"+
		"\x2\x2\x86\x68D\x3\x2\x2\x2\x88\x68F\x3\x2\x2\x2\x8A\x691\x3\x2\x2\x2"+
		"\x8C\x693\x3\x2\x2\x2\x8E\x695\x3\x2\x2\x2\x90\x697\x3\x2\x2\x2\x92\x699"+
		"\x3\x2\x2\x2\x94\x69B\x3\x2\x2\x2\x96\x69D\x3\x2\x2\x2\x98\x69F\x3\x2"+
		"\x2\x2\x9A\x6A1\x3\x2\x2\x2\x9C\x6A3\x3\x2\x2\x2\x9E\x6A5\x3\x2\x2\x2"+
		"\xA0\x6A7\x3\x2\x2\x2\xA2\x6A9\x3\x2\x2\x2\xA4\x6B2\x3\x2\x2\x2\xA6\xA9"+
		"\x5\x6\x4\x2\xA7\xA9\x5\x4\x3\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA7\x3\x2\x2"+
		"\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAD"+
		"\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAE\a\x2\x2\x3\xAE\x3\x3\x2\x2\x2"+
		"\xAF\xB0\a\xA0\x2\x2\xB0\xB1\b\x3\x1\x2\xB1\x5\x3\x2\x2\x2\xB2\xB4\a\x4"+
		"\x2\x2\xB3\xB2\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5"+
		"\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xC1\x5\b"+
		"\x5\x2\xB9\xBB\a\x4\x2\x2\xBA\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC"+
		"\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xC0\x5\b"+
		"\x5\x2\xBF\xBA\x3\x2\x2\x2\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1"+
		"\xC2\x3\x2\x2\x2\xC2\xC7\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xC6\a\x4"+
		"\x2\x2\xC5\xC4\x3\x2\x2\x2\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7"+
		"\xC8\x3\x2\x2\x2\xC8\a\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCD\aJ\x2\x2"+
		"\xCB\xCC\au\x2\x2\xCC\xCE\ar\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2"+
		"\x2\xCE\xD0\x3\x2\x2\x2\xCF\xCA\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xEF"+
		"\x3\x2\x2\x2\xD1\xF0\x5\n\x6\x2\xD2\xF0\x5\f\a\x2\xD3\xF0\x5\xE\b\x2\xD4"+
		"\xF0\x5\x10\t\x2\xD5\xF0\x5\x12\n\x2\xD6\xF0\x5\x14\v\x2\xD7\xF0\x5\x16"+
		"\f\x2\xD8\xF0\x5\x18\r\x2\xD9\xF0\x5\x1A\xE\x2\xDA\xF0\x5\x1C\xF\x2\xDB"+
		"\xF0\x5\x1E\x10\x2\xDC\xF0\x5 \x11\x2\xDD\xF0\x5\"\x12\x2\xDE\xF0\x5$"+
		"\x13\x2\xDF\xF0\x5&\x14\x2\xE0\xF0\x5(\x15\x2\xE1\xF0\x5*\x16\x2\xE2\xF0"+
		"\x5,\x17\x2\xE3\xF0\x5.\x18\x2\xE4\xF0\x5\x30\x19\x2\xE5\xF0\x5\x32\x1A"+
		"\x2\xE6\xF0\x5\x34\x1B\x2\xE7\xF0\x5\x36\x1C\x2\xE8\xF0\x5\x38\x1D\x2"+
		"\xE9\xF0\x5:\x1E\x2\xEA\xF0\x5<\x1F\x2\xEB\xF0\x5> \x2\xEC\xF0\x5\x42"+
		"\"\x2\xED\xF0\x5\x44#\x2\xEE\xF0\x5\x46$\x2\xEF\xD1\x3\x2\x2\x2\xEF\xD2"+
		"\x3\x2\x2\x2\xEF\xD3\x3\x2\x2\x2\xEF\xD4\x3\x2\x2\x2\xEF\xD5\x3\x2\x2"+
		"\x2\xEF\xD6\x3\x2\x2\x2\xEF\xD7\x3\x2\x2\x2\xEF\xD8\x3\x2\x2\x2\xEF\xD9"+
		"\x3\x2\x2\x2\xEF\xDA\x3\x2\x2\x2\xEF\xDB\x3\x2\x2\x2\xEF\xDC\x3\x2\x2"+
		"\x2\xEF\xDD\x3\x2\x2\x2\xEF\xDE\x3\x2\x2\x2\xEF\xDF\x3\x2\x2\x2\xEF\xE0"+
		"\x3\x2\x2\x2\xEF\xE1\x3\x2\x2\x2\xEF\xE2\x3\x2\x2\x2\xEF\xE3\x3\x2\x2"+
		"\x2\xEF\xE4\x3\x2\x2\x2\xEF\xE5\x3\x2\x2\x2\xEF\xE6\x3\x2\x2\x2\xEF\xE7"+
		"\x3\x2\x2\x2\xEF\xE8\x3\x2\x2\x2\xEF\xE9\x3\x2\x2\x2\xEF\xEA\x3\x2\x2"+
		"\x2\xEF\xEB\x3\x2\x2\x2\xEF\xEC\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xEE"+
		"\x3\x2\x2\x2\xF0\t\x3\x2\x2\x2\xF1\xF2\a!\x2\x2\xF2\xF6\a\x85\x2\x2\xF3"+
		"\xF4\x5\x86\x44\x2\xF4\xF5\a\x5\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6\xF3\x3\x2"+
		"\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\x101\x5\x88\x45\x2"+
		"\xF9\xFA\a|\x2\x2\xFA\xFB\a\x89\x2\x2\xFB\x102\x5\x8CG\x2\xFC\xFE\a\x1E"+
		"\x2\x2\xFD\xFF\a\x31\x2\x2\xFE\xFD\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF"+
		"\x100\x3\x2\x2\x2\x100\x102\x5H%\x2\x101\xF9\x3\x2\x2\x2\x101\xFC\x3\x2"+
		"\x2\x2\x102\v\x3\x2\x2\x2\x103\x10A\a\"\x2\x2\x104\x10B\x5\x86\x44\x2"+
		"\x105\x10B\x5\x8A\x46\x2\x106\x107\x5\x86\x44\x2\x107\x108\a\x5\x2\x2"+
		"\x108\x109\x5\x8A\x46\x2\x109\x10B\x3\x2\x2\x2\x10A\x104\x3\x2\x2\x2\x10A"+
		"\x105\x3\x2\x2\x2\x10A\x106\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\r\x3"+
		"\x2\x2\x2\x10C\x10E\a&\x2\x2\x10D\x10F\a:\x2\x2\x10E\x10D\x3\x2\x2\x2"+
		"\x10E\x10F\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x111\x5P)\x2\x111\x112"+
		"\a$\x2\x2\x112\x113\x5\x86\x44\x2\x113\xF\x3\x2\x2\x2\x114\x116\a)\x2"+
		"\x2\x115\x117\t\x2\x2\x2\x116\x115\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117"+
		"\x11C\x3\x2\x2\x2\x118\x11A\a\x8A\x2\x2\x119\x11B\x5\xA2R\x2\x11A\x119"+
		"\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11D\x3\x2\x2\x2\x11C\x118\x3"+
		"\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11\x3\x2\x2\x2\x11E\x123\t\x3\x2"+
		"\x2\x11F\x121\a\x8A\x2\x2\x120\x122\x5\xA2R\x2\x121\x120\x3\x2\x2\x2\x121"+
		"\x122\x3\x2\x2\x2\x122\x124\x3\x2\x2\x2\x123\x11F\x3\x2\x2\x2\x123\x124"+
		"\x3\x2\x2\x2\x124\x13\x3\x2\x2\x2\x125\x127\a\x96\x2\x2\x126\x128\aw\x2"+
		"\x2\x127\x126\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2"+
		"\x129\x12E\x5\x62\x32\x2\x12A\x12B\a\b\x2\x2\x12B\x12D\x5\x62\x32\x2\x12C"+
		"\x12A\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12E\x12F"+
		"\x3\x2\x2\x2\x12F\x132\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x131\x125\x3"+
		"\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x13D\x5n\x38"+
		"\x2\x134\x136\a\x8C\x2\x2\x135\x137\a \x2\x2\x136\x135\x3\x2\x2\x2\x136"+
		"\x137\x3\x2\x2\x2\x137\x13B\x3\x2\x2\x2\x138\x13B\a]\x2\x2\x139\x13B\a"+
		"G\x2\x2\x13A\x134\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2\x13A\x139\x3\x2\x2"+
		"\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13E\x5n\x38\x2\x13D\x13A\x3\x2\x2\x2\x13E"+
		"\x13F\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x14B"+
		"\x3\x2\x2\x2\x141\x142\ap\x2\x2\x142\x143\a+\x2\x2\x143\x148\x5^\x30\x2"+
		"\x144\x145\a\b\x2\x2\x145\x147\x5^\x30\x2\x146\x144\x3\x2\x2\x2\x147\x14A"+
		"\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14C\x3"+
		"\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14B\x141\x3\x2\x2\x2\x14B\x14C\x3\x2"+
		"\x2\x2\x14C\x153\x3\x2\x2\x2\x14D\x14E\a\x65\x2\x2\x14E\x151\x5P)\x2\x14F"+
		"\x150\t\x4\x2\x2\x150\x152\x5P)\x2\x151\x14F\x3\x2\x2\x2\x151\x152\x3"+
		"\x2\x2\x2\x152\x154\x3\x2\x2\x2\x153\x14D\x3\x2\x2\x2\x153\x154\x3\x2"+
		"\x2\x2\x154\x15\x3\x2\x2\x2\x155\x157\a\x35\x2\x2\x156\x158\a\x8D\x2\x2"+
		"\x157\x156\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159"+
		"\x15D\aW\x2\x2\x15A\x15B\aS\x2\x2\x15B\x15C\ai\x2\x2\x15C\x15E\aI\x2\x2"+
		"\x15D\x15A\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x162\x3\x2\x2\x2\x15F"+
		"\x160\x5\x86\x44\x2\x160\x161\a\x5\x2\x2\x161\x163\x3\x2\x2\x2\x162\x15F"+
		"\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x165\x5"+
		"\x94K\x2\x165\x166\an\x2\x2\x166\x167\x5\x88\x45\x2\x167\x168\a\x6\x2"+
		"\x2\x168\x16D\x5V,\x2\x169\x16A\a\b\x2\x2\x16A\x16C\x5V,\x2\x16B\x169"+
		"\x3\x2\x2\x2\x16C\x16F\x3\x2\x2\x2\x16D\x16B\x3\x2\x2\x2\x16D\x16E\x3"+
		"\x2\x2\x2\x16E\x170\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x170\x173\a\a\x2"+
		"\x2\x171\x172\a\x95\x2\x2\x172\x174\x5P)\x2\x173\x171\x3\x2\x2\x2\x173"+
		"\x174\x3\x2\x2\x2\x174\x17\x3\x2\x2\x2\x175\x177\a\x35\x2\x2\x176\x178"+
		"\t\x5\x2\x2\x177\x176\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179\x3\x2"+
		"\x2\x2\x179\x17D\a\x85\x2\x2\x17A\x17B\aS\x2\x2\x17B\x17C\ai\x2\x2\x17C"+
		"\x17E\aI\x2\x2\x17D\x17A\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\x182\x3"+
		"\x2\x2\x2\x17F\x180\x5\x86\x44\x2\x180\x181\a\x5\x2\x2\x181\x183\x3\x2"+
		"\x2\x2\x182\x17F\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183\x184\x3\x2\x2"+
		"\x2\x184\x19C\x5\x88\x45\x2\x185\x186\a\x6\x2\x2\x186\x18B\x5H%\x2\x187"+
		"\x188\a\b\x2\x2\x188\x18A\x5H%\x2\x189\x187\x3\x2\x2\x2\x18A\x18D\x3\x2"+
		"\x2\x2\x18B\x189\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C\x192\x3\x2\x2"+
		"\x2\x18D\x18B\x3\x2\x2\x2\x18E\x18F\a\b\x2\x2\x18F\x191\x5X-\x2\x190\x18E"+
		"\x3\x2\x2\x2\x191\x194\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x192\x193\x3"+
		"\x2\x2\x2\x193\x195\x3\x2\x2\x2\x194\x192\x3\x2\x2\x2\x195\x198\a\a\x2"+
		"\x2\x196\x197\a\x97\x2\x2\x197\x199\a\x98\x2\x2\x198\x196\x3\x2\x2\x2"+
		"\x198\x199\x3\x2\x2\x2\x199\x19D\x3\x2\x2\x2\x19A\x19B\a$\x2\x2\x19B\x19D"+
		"\x5> \x2\x19C\x185\x3\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19D\x19\x3\x2\x2"+
		"\x2\x19E\x1A0\a\x35\x2\x2\x19F\x1A1\t\x5\x2\x2\x1A0\x19F\x3\x2\x2\x2\x1A0"+
		"\x1A1\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A6\a\x8B\x2\x2\x1A3\x1A4"+
		"\aS\x2\x2\x1A4\x1A5\ai\x2\x2\x1A5\x1A7\aI\x2\x2\x1A6\x1A3\x3\x2\x2\x2"+
		"\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1AB\x3\x2\x2\x2\x1A8\x1A9\x5\x86\x44\x2\x1A9"+
		"\x1AA\a\x5\x2\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1A8\x3\x2\x2\x2\x1AB\x1AC"+
		"\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1B2\x5\x96L\x2\x1AE\x1B3\a(\x2"+
		"\x2\x1AF\x1B3\a\x1F\x2\x2\x1B0\x1B1\a\\\x2\x2\x1B1\x1B3\al\x2\x2\x1B2"+
		"\x1AE\x3\x2\x2\x2\x1B2\x1AF\x3\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3"+
		"\x3\x2\x2\x2\x1B3\x1C2\x3\x2\x2\x2\x1B4\x1C3\a>\x2\x2\x1B5\x1C3\a[\x2"+
		"\x2\x1B6\x1C0\a\x8E\x2\x2\x1B7\x1B8\al\x2\x2\x1B8\x1BD\x5\x8EH\x2\x1B9"+
		"\x1BA\a\b\x2\x2\x1BA\x1BC\x5\x8EH\x2\x1BB\x1B9\x3\x2\x2\x2\x1BC\x1BF\x3"+
		"\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1C1\x3\x2"+
		"\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1C0\x1B7\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2"+
		"\x2\x1C1\x1C3\x3\x2\x2\x2\x1C2\x1B4\x3\x2\x2\x2\x1C2\x1B5\x3\x2\x2\x2"+
		"\x1C2\x1B6\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C8\an\x2\x2\x1C5\x1C6"+
		"\x5\x86\x44\x2\x1C6\x1C7\a\x5\x2\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1C5\x3"+
		"\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CE\x5\x88"+
		"\x45\x2\x1CB\x1CC\aL\x2\x2\x1CC\x1CD\a\x43\x2\x2\x1CD\x1CF\a\x81\x2\x2"+
		"\x1CE\x1CB\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x1D2\x3\x2\x2\x2\x1D0"+
		"\x1D1\a\x94\x2\x2\x1D1\x1D3\x5P)\x2\x1D2\x1D0\x3\x2\x2\x2\x1D2\x1D3\x3"+
		"\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1DD\a)\x2\x2\x1D5\x1DA\x5\x42\""+
		"\x2\x1D6\x1DA\x5\x30\x19\x2\x1D7\x1DA\x5 \x11\x2\x1D8\x1DA\x5> \x2\x1D9"+
		"\x1D5\x3\x2\x2\x2\x1D9\x1D6\x3\x2\x2\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1D8"+
		"\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\a\x4\x2\x2\x1DC\x1DE\x3\x2"+
		"\x2\x2\x1DD\x1D9\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1DD\x3\x2\x2"+
		"\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x1E2\a\x45\x2\x2"+
		"\x1E2\x1B\x3\x2\x2\x2\x1E3\x1E5\a\x35\x2\x2\x1E4\x1E6\t\x5\x2\x2\x1E5"+
		"\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1EB"+
		"\a\x92\x2\x2\x1E8\x1E9\aS\x2\x2\x1E9\x1EA\ai\x2\x2\x1EA\x1EC\aI\x2\x2"+
		"\x1EB\x1E8\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1F0\x3\x2\x2\x2\x1ED"+
		"\x1EE\x5\x86\x44\x2\x1EE\x1EF\a\x5\x2\x2\x1EF\x1F1\x3\x2\x2\x2\x1F0\x1ED"+
		"\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2\x1F3\x5"+
		"\x98M\x2\x1F3\x1F4\a$\x2\x2\x1F4\x1F5\x5> \x2\x1F5\x1D\x3\x2\x2\x2\x1F6"+
		"\x1F7\a\x35\x2\x2\x1F7\x1F8\a\x93\x2\x2\x1F8\x1FC\a\x85\x2\x2\x1F9\x1FA"+
		"\aS\x2\x2\x1FA\x1FB\ai\x2\x2\x1FB\x1FD\aI\x2\x2\x1FC\x1F9\x3\x2\x2\x2"+
		"\x1FC\x1FD\x3\x2\x2\x2\x1FD\x201\x3\x2\x2\x2\x1FE\x1FF\x5\x86\x44\x2\x1FF"+
		"\x200\a\x5\x2\x2\x200\x202\x3\x2\x2\x2\x201\x1FE\x3\x2\x2\x2\x201\x202"+
		"\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203\x204\x5\x88\x45\x2\x204\x205\a"+
		"\x8F\x2\x2\x205\x211\x5\x9AN\x2\x206\x207\a\x6\x2\x2\x207\x20C\x5|?\x2"+
		"\x208\x209\a\b\x2\x2\x209\x20B\x5|?\x2\x20A\x208\x3\x2\x2\x2\x20B\x20E"+
		"\x3\x2\x2\x2\x20C\x20A\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20F\x3"+
		"\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20F\x210\a\a\x2\x2\x210\x212\x3\x2\x2"+
		"\x2\x211\x206\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x1F\x3\x2\x2\x2\x213"+
		"\x215\x5Z.\x2\x214\x213\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x215\x216\x3"+
		"\x2\x2\x2\x216\x217\a>\x2\x2\x217\x218\aN\x2\x2\x218\x21B\x5\\/\x2\x219"+
		"\x21A\a\x95\x2\x2\x21A\x21C\x5P)\x2\x21B\x219\x3\x2\x2\x2\x21B\x21C\x3"+
		"\x2\x2\x2\x21C!\x3\x2\x2\x2\x21D\x21F\x5Z.\x2\x21E\x21D\x3\x2\x2\x2\x21E"+
		"\x21F\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x221\a>\x2\x2\x221\x222\a"+
		"N\x2\x2\x222\x225\x5\\/\x2\x223\x224\a\x95\x2\x2\x224\x226\x5P)\x2\x225"+
		"\x223\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x239\x3\x2\x2\x2\x227\x228"+
		"\ap\x2\x2\x228\x229\a+\x2\x2\x229\x22E\x5^\x30\x2\x22A\x22B\a\b\x2\x2"+
		"\x22B\x22D\x5^\x30\x2\x22C\x22A\x3\x2\x2\x2\x22D\x230\x3\x2\x2\x2\x22E"+
		"\x22C\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F\x232\x3\x2\x2\x2\x230\x22E"+
		"\x3\x2\x2\x2\x231\x227\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x233\x3"+
		"\x2\x2\x2\x233\x234\a\x65\x2\x2\x234\x237\x5P)\x2\x235\x236\t\x4\x2\x2"+
		"\x236\x238\x5P)\x2\x237\x235\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238\x23A"+
		"\x3\x2\x2\x2\x239\x231\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A#\x3\x2\x2"+
		"\x2\x23B\x23D\a@\x2\x2\x23C\x23E\a:\x2\x2\x23D\x23C\x3\x2\x2\x2\x23D\x23E"+
		"\x3\x2\x2\x2\x23E\x23F\x3\x2\x2\x2\x23F\x240\x5\x86\x44\x2\x240%\x3\x2"+
		"\x2\x2\x241\x242\a\x42\x2\x2\x242\x245\aW\x2\x2\x243\x244\aS\x2\x2\x244"+
		"\x246\aI\x2\x2\x245\x243\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x24A\x3"+
		"\x2\x2\x2\x247\x248\x5\x86\x44\x2\x248\x249\a\x5\x2\x2\x249\x24B\x3\x2"+
		"\x2\x2\x24A\x247\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x24C\x3\x2\x2"+
		"\x2\x24C\x24D\x5\x94K\x2\x24D\'\x3\x2\x2\x2\x24E\x24F\a\x42\x2\x2\x24F"+
		"\x252\a\x85\x2\x2\x250\x251\aS\x2\x2\x251\x253\aI\x2\x2\x252\x250\x3\x2"+
		"\x2\x2\x252\x253\x3\x2\x2\x2\x253\x257\x3\x2\x2\x2\x254\x255\x5\x86\x44"+
		"\x2\x255\x256\a\x5\x2\x2\x256\x258\x3\x2\x2\x2\x257\x254\x3\x2\x2\x2\x257"+
		"\x258\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25A\x5\x88\x45\x2\x25A)"+
		"\x3\x2\x2\x2\x25B\x25C\a\x42\x2\x2\x25C\x25F\a\x8B\x2\x2\x25D\x25E\aS"+
		"\x2\x2\x25E\x260\aI\x2\x2\x25F\x25D\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2"+
		"\x260\x264\x3\x2\x2\x2\x261\x262\x5\x86\x44\x2\x262\x263\a\x5\x2\x2\x263"+
		"\x265\x3\x2\x2\x2\x264\x261\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x266"+
		"\x3\x2\x2\x2\x266\x267\x5\x96L\x2\x267+\x3\x2\x2\x2\x268\x269\a\x42\x2"+
		"\x2\x269\x26C\a\x92\x2\x2\x26A\x26B\aS\x2\x2\x26B\x26D\aI\x2\x2\x26C\x26A"+
		"\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x271\x3\x2\x2\x2\x26E\x26F\x5"+
		"\x86\x44\x2\x26F\x270\a\x5\x2\x2\x270\x272\x3\x2\x2\x2\x271\x26E\x3\x2"+
		"\x2\x2\x271\x272\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x274\x5\x98M\x2"+
		"\x274-\x3\x2\x2\x2\x275\x277\a\x96\x2\x2\x276\x278\aw\x2\x2\x277\x276"+
		"\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27E\x5"+
		"\x62\x32\x2\x27A\x27B\a\b\x2\x2\x27B\x27D\x5\x62\x32\x2\x27C\x27A\x3\x2"+
		"\x2\x2\x27D\x280\x3\x2\x2\x2\x27E\x27C\x3\x2\x2\x2\x27E\x27F\x3\x2\x2"+
		"\x2\x27F\x282\x3\x2\x2\x2\x280\x27E\x3\x2\x2\x2\x281\x275\x3\x2\x2\x2"+
		"\x281\x282\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x289\x5n\x38\x2\x284"+
		"\x285\x5p\x39\x2\x285\x286\x5n\x38\x2\x286\x288\x3\x2\x2\x2\x287\x284"+
		"\x3\x2\x2\x2\x288\x28B\x3\x2\x2\x2\x289\x287\x3\x2\x2\x2\x289\x28A\x3"+
		"\x2\x2\x2\x28A\x296\x3\x2\x2\x2\x28B\x289\x3\x2\x2\x2\x28C\x28D\ap\x2"+
		"\x2\x28D\x28E\a+\x2\x2\x28E\x293\x5^\x30\x2\x28F\x290\a\b\x2\x2\x290\x292"+
		"\x5^\x30\x2\x291\x28F\x3\x2\x2\x2\x292\x295\x3\x2\x2\x2\x293\x291\x3\x2"+
		"\x2\x2\x293\x294\x3\x2\x2\x2\x294\x297\x3\x2\x2\x2\x295\x293\x3\x2\x2"+
		"\x2\x296\x28C\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x29E\x3\x2\x2\x2"+
		"\x298\x299\a\x65\x2\x2\x299\x29C\x5P)\x2\x29A\x29B\t\x4\x2\x2\x29B\x29D"+
		"\x5P)\x2\x29C\x29A\x3\x2\x2\x2\x29C\x29D\x3\x2\x2\x2\x29D\x29F\x3\x2\x2"+
		"\x2\x29E\x298\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F/\x3\x2\x2\x2\x2A0"+
		"\x2A2\x5Z.\x2\x2A1\x2A0\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2B4\x3"+
		"\x2\x2\x2\x2A3\x2B5\a[\x2\x2\x2A4\x2B5\a}\x2\x2\x2A5\x2A6\a[\x2\x2\x2A6"+
		"\x2A7\ao\x2\x2\x2A7\x2B5\a}\x2\x2\x2A8\x2A9\a[\x2\x2\x2A9\x2AA\ao\x2\x2"+
		"\x2AA\x2B5\a\x80\x2\x2\x2AB\x2AC\a[\x2\x2\x2AC\x2AD\ao\x2\x2\x2AD\x2B5"+
		"\a\x1C\x2\x2\x2AE\x2AF\a[\x2\x2\x2AF\x2B0\ao\x2\x2\x2B0\x2B5\aK\x2\x2"+
		"\x2B1\x2B2\a[\x2\x2\x2B2\x2B3\ao\x2\x2\x2B3\x2B5\aT\x2\x2\x2B4\x2A3\x3"+
		"\x2\x2\x2\x2B4\x2A4\x3\x2\x2\x2\x2B4\x2A5\x3\x2\x2\x2\x2B4\x2A8\x3\x2"+
		"\x2\x2\x2B4\x2AB\x3\x2\x2\x2\x2B4\x2AE\x3\x2\x2\x2\x2B4\x2B1\x3\x2\x2"+
		"\x2\x2B5\x2B6\x3\x2\x2\x2\x2B6\x2BA\a^\x2\x2\x2B7\x2B8\x5\x86\x44\x2\x2B8"+
		"\x2B9\a\x5\x2\x2\x2B9\x2BB\x3\x2\x2\x2\x2BA\x2B7\x3\x2\x2\x2\x2BA\x2BB"+
		"\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC\x2C8\x5\x88\x45\x2\x2BD\x2BE\a"+
		"\x6\x2\x2\x2BE\x2C3\x5\x8EH\x2\x2BF\x2C0\a\b\x2\x2\x2C0\x2C2\x5\x8EH\x2"+
		"\x2C1\x2BF\x3\x2\x2\x2\x2C2\x2C5\x3\x2\x2\x2\x2C3\x2C1\x3\x2\x2\x2\x2C3"+
		"\x2C4\x3\x2\x2\x2\x2C4\x2C6\x3\x2\x2\x2\x2C5\x2C3\x3\x2\x2\x2\x2C6\x2C7"+
		"\a\a\x2\x2\x2C7\x2C9\x3\x2\x2\x2\x2C8\x2BD\x3\x2\x2\x2\x2C8\x2C9\x3\x2"+
		"\x2\x2\x2C9\x2E9\x3\x2\x2\x2\x2CA\x2CB\a\x91\x2\x2\x2CB\x2CC\a\x6\x2\x2"+
		"\x2CC\x2D1\x5P)\x2\x2CD\x2CE\a\b\x2\x2\x2CE\x2D0\x5P)\x2\x2CF\x2CD\x3"+
		"\x2\x2\x2\x2D0\x2D3\x3\x2\x2\x2\x2D1\x2CF\x3\x2\x2\x2\x2D1\x2D2\x3\x2"+
		"\x2\x2\x2D2\x2D4\x3\x2\x2\x2\x2D3\x2D1\x3\x2\x2\x2\x2D4\x2E3\a\a\x2\x2"+
		"\x2D5\x2D6\a\b\x2\x2\x2D6\x2D7\a\x6\x2\x2\x2D7\x2DC\x5P)\x2\x2D8\x2D9"+
		"\a\b\x2\x2\x2D9\x2DB\x5P)\x2\x2DA\x2D8\x3\x2\x2\x2\x2DB\x2DE\x3\x2\x2"+
		"\x2\x2DC\x2DA\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DF\x3\x2\x2\x2"+
		"\x2DE\x2DC\x3\x2\x2\x2\x2DF\x2E0\a\a\x2\x2\x2E0\x2E2\x3\x2\x2\x2\x2E1"+
		"\x2D5\x3\x2\x2\x2\x2E2\x2E5\x3\x2\x2\x2\x2E3\x2E1\x3\x2\x2\x2\x2E3\x2E4"+
		"\x3\x2\x2\x2\x2E4\x2EA\x3\x2\x2\x2\x2E5\x2E3\x3\x2\x2\x2\x2E6\x2EA\x5"+
		"> \x2\x2E7\x2E8\a;\x2\x2\x2E8\x2EA\a\x91\x2\x2\x2E9\x2CA\x3\x2\x2\x2\x2E9"+
		"\x2E6\x3\x2\x2\x2\x2E9\x2E7\x3\x2\x2\x2\x2EA\x31\x3\x2\x2\x2\x2EB\x2EF"+
		"\as\x2\x2\x2EC\x2ED\x5\x86\x44\x2\x2ED\x2EE\a\x5\x2\x2\x2EE\x2F0\x3\x2"+
		"\x2\x2\x2EF\x2EC\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2"+
		"\x2\x2F1\x2F8\x5\x9CO\x2\x2F2\x2F3\a\t\x2\x2\x2F3\x2F9\x5`\x31\x2\x2F4"+
		"\x2F5\a\x6\x2\x2\x2F5\x2F6\x5`\x31\x2\x2F6\x2F7\a\a\x2\x2\x2F7\x2F9\x3"+
		"\x2\x2\x2\x2F8\x2F2\x3\x2\x2\x2\x2F8\x2F4\x3\x2\x2\x2\x2F8\x2F9\x3\x2"+
		"\x2\x2\x2F9\x33\x3\x2\x2\x2\x2FA\x305\az\x2\x2\x2FB\x306\x5\x90I\x2\x2FC"+
		"\x2FD\x5\x86\x44\x2\x2FD\x2FE\a\x5\x2\x2\x2FE\x300\x3\x2\x2\x2\x2FF\x2FC"+
		"\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x303\x3\x2\x2\x2\x301\x304\x5"+
		"\x88\x45\x2\x302\x304\x5\x94K\x2\x303\x301\x3\x2\x2\x2\x303\x302\x3\x2"+
		"\x2\x2\x304\x306\x3\x2\x2\x2\x305\x2FB\x3\x2\x2\x2\x305\x2FF\x3\x2\x2"+
		"\x2\x305\x306\x3\x2\x2\x2\x306\x35\x3\x2\x2\x2\x307\x309\a{\x2\x2\x308"+
		"\x30A\a\x82\x2\x2\x309\x308\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30B"+
		"\x3\x2\x2\x2\x30B\x30C\x5\x9EP\x2\x30C\x37\x3\x2\x2\x2\x30D\x312\a\x80"+
		"\x2\x2\x30E\x310\a\x8A\x2\x2\x30F\x311\x5\xA2R\x2\x310\x30F\x3\x2\x2\x2"+
		"\x310\x311\x3\x2\x2\x2\x311\x313\x3\x2\x2\x2\x312\x30E\x3\x2\x2\x2\x312"+
		"\x313\x3\x2\x2\x2\x313\x319\x3\x2\x2\x2\x314\x316\a\x89\x2\x2\x315\x317"+
		"\a\x82\x2\x2\x316\x315\x3\x2\x2\x2\x316\x317\x3\x2\x2\x2\x317\x318\x3"+
		"\x2\x2\x2\x318\x31A\x5\x9EP\x2\x319\x314\x3\x2\x2\x2\x319\x31A\x3\x2\x2"+
		"\x2\x31A\x39\x3\x2\x2\x2\x31B\x31C\a\x82\x2\x2\x31C\x31D\x5\x9EP\x2\x31D"+
		";\x3\x2\x2\x2\x31E\x320\a\x96\x2\x2\x31F\x321\aw\x2\x2\x320\x31F\x3\x2"+
		"\x2\x2\x320\x321\x3\x2\x2\x2\x321\x322\x3\x2\x2\x2\x322\x327\x5\x62\x32"+
		"\x2\x323\x324\a\b\x2\x2\x324\x326\x5\x62\x32\x2\x325\x323\x3\x2\x2\x2"+
		"\x326\x329\x3\x2\x2\x2\x327\x325\x3\x2\x2\x2\x327\x328\x3\x2\x2\x2\x328"+
		"\x32B\x3\x2\x2\x2\x329\x327\x3\x2\x2\x2\x32A\x31E\x3\x2\x2\x2\x32A\x32B"+
		"\x3\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\x337\x5n\x38\x2\x32D\x32E\ap\x2"+
		"\x2\x32E\x32F\a+\x2\x2\x32F\x334\x5^\x30\x2\x330\x331\a\b\x2\x2\x331\x333"+
		"\x5^\x30\x2\x332\x330\x3\x2\x2\x2\x333\x336\x3\x2\x2\x2\x334\x332\x3\x2"+
		"\x2\x2\x334\x335\x3\x2\x2\x2\x335\x338\x3\x2\x2\x2\x336\x334\x3\x2\x2"+
		"\x2\x337\x32D\x3\x2\x2\x2\x337\x338\x3\x2\x2\x2\x338\x33F\x3\x2\x2\x2"+
		"\x339\x33A\a\x65\x2\x2\x33A\x33D\x5P)\x2\x33B\x33C\t\x4\x2\x2\x33C\x33E"+
		"\x5P)\x2\x33D\x33B\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x340\x3\x2\x2"+
		"\x2\x33F\x339\x3\x2\x2\x2\x33F\x340\x3\x2\x2\x2\x340=\x3\x2\x2\x2\x341"+
		"\x343\a\x96\x2\x2\x342\x344\aw\x2\x2\x343\x342\x3\x2\x2\x2\x343\x344\x3"+
		"\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345\x34A\x5\x62\x32\x2\x346\x347\a\b"+
		"\x2\x2\x347\x349\x5\x62\x32\x2\x348\x346\x3\x2\x2\x2\x349\x34C\x3\x2\x2"+
		"\x2\x34A\x348\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34B\x34E\x3\x2\x2\x2"+
		"\x34C\x34A\x3\x2\x2\x2\x34D\x341\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E"+
		"\x34F\x3\x2\x2\x2\x34F\x355\x5@!\x2\x350\x351\x5p\x39\x2\x351\x352\x5"+
		"@!\x2\x352\x354\x3\x2\x2\x2\x353\x350\x3\x2\x2\x2\x354\x357\x3\x2\x2\x2"+
		"\x355\x353\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2\x356\x362\x3\x2\x2\x2\x357"+
		"\x355\x3\x2\x2\x2\x358\x359\ap\x2\x2\x359\x35A\a+\x2\x2\x35A\x35F\x5^"+
		"\x30\x2\x35B\x35C\a\b\x2\x2\x35C\x35E\x5^\x30\x2\x35D\x35B\x3\x2\x2\x2"+
		"\x35E\x361\x3\x2\x2\x2\x35F\x35D\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360"+
		"\x363\x3\x2\x2\x2\x361\x35F\x3\x2\x2\x2\x362\x358\x3\x2\x2\x2\x362\x363"+
		"\x3\x2\x2\x2\x363\x36A\x3\x2\x2\x2\x364\x365\a\x65\x2\x2\x365\x368\x5"+
		"P)\x2\x366\x367\t\x4\x2\x2\x367\x369\x5P)\x2\x368\x366\x3\x2\x2\x2\x368"+
		"\x369\x3\x2\x2\x2\x369\x36B\x3\x2\x2\x2\x36A\x364\x3\x2\x2\x2\x36A\x36B"+
		"\x3\x2\x2\x2\x36B?\x3\x2\x2\x2\x36C\x36E\a\x83\x2\x2\x36D\x36F\t\x6\x2"+
		"\x2\x36E\x36D\x3\x2\x2\x2\x36E\x36F\x3\x2\x2\x2\x36F\x370\x3\x2\x2\x2"+
		"\x370\x375\x5\x64\x33\x2\x371\x372\a\b\x2\x2\x372\x374\x5\x64\x33\x2\x373"+
		"\x371\x3\x2\x2\x2\x374\x377\x3\x2\x2\x2\x375\x373\x3\x2\x2\x2\x375\x376"+
		"\x3\x2\x2\x2\x376\x384\x3\x2\x2\x2\x377\x375\x3\x2\x2\x2\x378\x382\aN"+
		"\x2\x2\x379\x37E\x5\x66\x34\x2\x37A\x37B\a\b\x2\x2\x37B\x37D\x5\x66\x34"+
		"\x2\x37C\x37A\x3\x2\x2\x2\x37D\x380\x3\x2\x2\x2\x37E\x37C\x3\x2\x2\x2"+
		"\x37E\x37F\x3\x2\x2\x2\x37F\x383\x3\x2\x2\x2\x380\x37E\x3\x2\x2\x2\x381"+
		"\x383\x5h\x35\x2\x382\x379\x3\x2\x2\x2\x382\x381\x3\x2\x2\x2\x383\x385"+
		"\x3\x2\x2\x2\x384\x378\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385\x388\x3"+
		"\x2\x2\x2\x386\x387\a\x95\x2\x2\x387\x389\x5P)\x2\x388\x386\x3\x2\x2\x2"+
		"\x388\x389\x3\x2\x2\x2\x389\x398\x3\x2\x2\x2\x38A\x38B\aQ\x2\x2\x38B\x38C"+
		"\a+\x2\x2\x38C\x391\x5P)\x2\x38D\x38E\a\b\x2\x2\x38E\x390\x5P)\x2\x38F"+
		"\x38D\x3\x2\x2\x2\x390\x393\x3\x2\x2\x2\x391\x38F\x3\x2\x2\x2\x391\x392"+
		"\x3\x2\x2\x2\x392\x396\x3\x2\x2\x2\x393\x391\x3\x2\x2\x2\x394\x395\aR"+
		"\x2\x2\x395\x397\x5P)\x2\x396\x394\x3\x2\x2\x2\x396\x397\x3\x2\x2\x2\x397"+
		"\x399\x3\x2\x2\x2\x398\x38A\x3\x2\x2\x2\x398\x399\x3\x2\x2\x2\x399\x3B7"+
		"\x3\x2\x2\x2\x39A\x39B\a\x91\x2\x2\x39B\x39C\a\x6\x2\x2\x39C\x3A1\x5P"+
		")\x2\x39D\x39E\a\b\x2\x2\x39E\x3A0\x5P)\x2\x39F\x39D\x3\x2\x2\x2\x3A0"+
		"\x3A3\x3\x2\x2\x2\x3A1\x39F\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2\x3A2\x3A4"+
		"\x3\x2\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A4\x3B3\a\a\x2\x2\x3A5\x3A6\a\b\x2"+
		"\x2\x3A6\x3A7\a\x6\x2\x2\x3A7\x3AC\x5P)\x2\x3A8\x3A9\a\b\x2\x2\x3A9\x3AB"+
		"\x5P)\x2\x3AA\x3A8\x3\x2\x2\x2\x3AB\x3AE\x3\x2\x2\x2\x3AC\x3AA\x3\x2\x2"+
		"\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AF\x3\x2\x2\x2\x3AE\x3AC\x3\x2\x2\x2"+
		"\x3AF\x3B0\a\a\x2\x2\x3B0\x3B2\x3\x2\x2\x2\x3B1\x3A5\x3\x2\x2\x2\x3B2"+
		"\x3B5\x3\x2\x2\x2\x3B3\x3B1\x3\x2\x2\x2\x3B3\x3B4\x3\x2\x2\x2\x3B4\x3B7"+
		"\x3\x2\x2\x2\x3B5\x3B3\x3\x2\x2\x2\x3B6\x36C\x3\x2\x2\x2\x3B6\x39A\x3"+
		"\x2\x2\x2\x3B7\x41\x3\x2\x2\x2\x3B8\x3BA\x5Z.\x2\x3B9\x3B8\x3\x2\x2\x2"+
		"\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3C6\a\x8E\x2\x2\x3BC"+
		"\x3BD\ao\x2\x2\x3BD\x3C7\a\x80\x2\x2\x3BE\x3BF\ao\x2\x2\x3BF\x3C7\a\x1C"+
		"\x2\x2\x3C0\x3C1\ao\x2\x2\x3C1\x3C7\a}\x2\x2\x3C2\x3C3\ao\x2\x2\x3C3\x3C7"+
		"\aK\x2\x2\x3C4\x3C5\ao\x2\x2\x3C5\x3C7\aT\x2\x2\x3C6\x3BC\x3\x2\x2\x2"+
		"\x3C6\x3BE\x3\x2\x2\x2\x3C6\x3C0\x3\x2\x2\x2\x3C6\x3C2\x3\x2\x2\x2\x3C6"+
		"\x3C4\x3\x2\x2\x2\x3C6\x3C7\x3\x2\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3C9"+
		"\x5\\/\x2\x3C9\x3CA\a\x84\x2\x2\x3CA\x3CB\x5\x8EH\x2\x3CB\x3CC\a\t\x2"+
		"\x2\x3CC\x3D4\x5P)\x2\x3CD\x3CE\a\b\x2\x2\x3CE\x3CF\x5\x8EH\x2\x3CF\x3D0"+
		"\a\t\x2\x2\x3D0\x3D1\x5P)\x2\x3D1\x3D3\x3\x2\x2\x2\x3D2\x3CD\x3\x2\x2"+
		"\x2\x3D3\x3D6\x3\x2\x2\x2\x3D4\x3D2\x3\x2\x2\x2\x3D4\x3D5\x3\x2\x2\x2"+
		"\x3D5\x3D9\x3\x2\x2\x2\x3D6\x3D4\x3\x2\x2\x2\x3D7\x3D8\a\x95\x2\x2\x3D8"+
		"\x3DA\x5P)\x2\x3D9\x3D7\x3\x2\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x43\x3"+
		"\x2\x2\x2\x3DB\x3DD\x5Z.\x2\x3DC\x3DB\x3\x2\x2\x2\x3DC\x3DD\x3\x2\x2\x2"+
		"\x3DD\x3DE\x3\x2\x2\x2\x3DE\x3E9\a\x8E\x2\x2\x3DF\x3E0\ao\x2\x2\x3E0\x3EA"+
		"\a\x80\x2\x2\x3E1\x3E2\ao\x2\x2\x3E2\x3EA\a\x1C\x2\x2\x3E3\x3E4\ao\x2"+
		"\x2\x3E4\x3EA\a}\x2\x2\x3E5\x3E6\ao\x2\x2\x3E6\x3EA\aK\x2\x2\x3E7\x3E8"+
		"\ao\x2\x2\x3E8\x3EA\aT\x2\x2\x3E9\x3DF\x3\x2\x2\x2\x3E9\x3E1\x3\x2\x2"+
		"\x2\x3E9\x3E3\x3\x2\x2\x2\x3E9\x3E5\x3\x2\x2\x2\x3E9\x3E7\x3\x2\x2\x2"+
		"\x3E9\x3EA\x3\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3EC\x5\\/\x2\x3EC\x3ED"+
		"\a\x84\x2\x2\x3ED\x3EE\x5\x8EH\x2\x3EE\x3EF\a\t\x2\x2\x3EF\x3F7\x5P)\x2"+
		"\x3F0\x3F1\a\b\x2\x2\x3F1\x3F2\x5\x8EH\x2\x3F2\x3F3\a\t\x2\x2\x3F3\x3F4"+
		"\x5P)\x2\x3F4\x3F6\x3\x2\x2\x2\x3F5\x3F0\x3\x2\x2\x2\x3F6\x3F9\x3\x2\x2"+
		"\x2\x3F7\x3F5\x3\x2\x2\x2\x3F7\x3F8\x3\x2\x2\x2\x3F8\x3FC\x3\x2\x2\x2"+
		"\x3F9\x3F7\x3\x2\x2\x2\x3FA\x3FB\a\x95\x2\x2\x3FB\x3FD\x5P)\x2\x3FC\x3FA"+
		"\x3\x2\x2\x2\x3FC\x3FD\x3\x2\x2\x2\x3FD\x410\x3\x2\x2\x2\x3FE\x3FF\ap"+
		"\x2\x2\x3FF\x400\a+\x2\x2\x400\x405\x5^\x30\x2\x401\x402\a\b\x2\x2\x402"+
		"\x404\x5^\x30\x2\x403\x401\x3\x2\x2\x2\x404\x407\x3\x2\x2\x2\x405\x403"+
		"\x3\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406\x409\x3\x2\x2\x2\x407\x405\x3"+
		"\x2\x2\x2\x408\x3FE\x3\x2\x2\x2\x408\x409\x3\x2\x2\x2\x409\x40A\x3\x2"+
		"\x2\x2\x40A\x40B\a\x65\x2\x2\x40B\x40E\x5P)\x2\x40C\x40D\t\x4\x2\x2\x40D"+
		"\x40F\x5P)\x2\x40E\x40C\x3\x2\x2\x2\x40E\x40F\x3\x2\x2\x2\x40F\x411\x3"+
		"\x2\x2\x2\x410\x408\x3\x2\x2\x2\x410\x411\x3\x2\x2\x2\x411\x45\x3\x2\x2"+
		"\x2\x412\x413\a\x90\x2\x2\x413G\x3\x2\x2\x2\x414\x416\x5\x8EH\x2\x415"+
		"\x417\x5J&\x2\x416\x415\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417\x41B\x3"+
		"\x2\x2\x2\x418\x41A\x5L\'\x2\x419\x418\x3\x2\x2\x2\x41A\x41D\x3\x2\x2"+
		"\x2\x41B\x419\x3\x2\x2\x2\x41B\x41C\x3\x2\x2\x2\x41CI\x3\x2\x2\x2\x41D"+
		"\x41B\x3\x2\x2\x2\x41E\x420\x5\x82\x42\x2\x41F\x41E\x3\x2\x2\x2\x420\x421"+
		"\x3\x2\x2\x2\x421\x41F\x3\x2\x2\x2\x421\x422\x3\x2\x2\x2\x422\x42D\x3"+
		"\x2\x2\x2\x423\x424\a\x6\x2\x2\x424\x425\x5t;\x2\x425\x426\a\a\x2\x2\x426"+
		"\x42E\x3\x2\x2\x2\x427\x428\a\x6\x2\x2\x428\x429\x5t;\x2\x429\x42A\a\b"+
		"\x2\x2\x42A\x42B\x5t;\x2\x42B\x42C\a\a\x2\x2\x42C\x42E\x3\x2\x2\x2\x42D"+
		"\x423\x3\x2\x2\x2\x42D\x427\x3\x2\x2\x2\x42D\x42E\x3\x2\x2\x2\x42EK\x3"+
		"\x2\x2\x2\x42F\x430\a\x34\x2\x2\x430\x432\x5\x82\x42\x2\x431\x42F\x3\x2"+
		"\x2\x2\x431\x432\x3\x2\x2\x2\x432\x454\x3\x2\x2\x2\x433\x434\at\x2\x2"+
		"\x434\x436\a\x62\x2\x2\x435\x437\t\a\x2\x2\x436\x435\x3\x2\x2\x2\x436"+
		"\x437\x3\x2\x2\x2\x437\x438\x3\x2\x2\x2\x438\x43A\x5N(\x2\x439\x43B\a"+
		"\'\x2\x2\x43A\x439\x3\x2\x2\x2\x43A\x43B\x3\x2\x2\x2\x43B\x455\x3\x2\x2"+
		"\x2\x43C\x43E\ai\x2\x2\x43D\x43C\x3\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E"+
		"\x43F\x3\x2\x2\x2\x43F\x440\ak\x2\x2\x440\x455\x5N(\x2\x441\x442\a\x8D"+
		"\x2\x2\x442\x455\x5N(\x2\x443\x444\a/\x2\x2\x444\x445\a\x6\x2\x2\x445"+
		"\x446\x5P)\x2\x446\x447\a\a\x2\x2\x447\x455\x3\x2\x2\x2\x448\x44F\a;\x2"+
		"\x2\x449\x450\x5t;\x2\x44A\x450\x5v<\x2\x44B\x44C\a\x6\x2\x2\x44C\x44D"+
		"\x5P)\x2\x44D\x44E\a\a\x2\x2\x44E\x450\x3\x2\x2\x2\x44F\x449\x3\x2\x2"+
		"\x2\x44F\x44A\x3\x2\x2\x2\x44F\x44B\x3\x2\x2\x2\x450\x455\x3\x2\x2\x2"+
		"\x451\x452\a\x30\x2\x2\x452\x455\x5\x90I\x2\x453\x455\x5R*\x2\x454\x433"+
		"\x3\x2\x2\x2\x454\x43D\x3\x2\x2\x2\x454\x441\x3\x2\x2\x2\x454\x443\x3"+
		"\x2\x2\x2\x454\x448\x3\x2\x2\x2\x454\x451\x3\x2\x2\x2\x454\x453\x3\x2"+
		"\x2\x2\x455M\x3\x2\x2\x2\x456\x457\an\x2\x2\x457\x458\a\x33\x2\x2\x458"+
		"\x45A\t\b\x2\x2\x459\x456\x3\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45AO\x3\x2"+
		"\x2\x2\x45B\x45C\b)\x1\x2\x45C\x4A7\x5v<\x2\x45D\x4A7\a\x9A\x2\x2\x45E"+
		"\x45F\x5\x86\x44\x2\x45F\x460\a\x5\x2\x2\x460\x462\x3\x2\x2\x2\x461\x45E"+
		"\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462\x463\x3\x2\x2\x2\x463\x464\x5"+
		"\x88\x45\x2\x464\x465\a\x5\x2\x2\x465\x467\x3\x2\x2\x2\x466\x461\x3\x2"+
		"\x2\x2\x466\x467\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2\x468\x4A7\x5\x8EH\x2"+
		"\x469\x46A\x5x=\x2\x46A\x46B\x5P)\x15\x46B\x4A7\x3\x2\x2\x2\x46C\x46D"+
		"\x5\x84\x43\x2\x46D\x47A\a\x6\x2\x2\x46E\x470\a\x41\x2\x2\x46F\x46E\x3"+
		"\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x476\x5P)\x2"+
		"\x472\x473\a\b\x2\x2\x473\x475\x5P)\x2\x474\x472\x3\x2\x2\x2\x475\x478"+
		"\x3\x2\x2\x2\x476\x474\x3\x2\x2\x2\x476\x477\x3\x2\x2\x2\x477\x47B\x3"+
		"\x2\x2\x2\x478\x476\x3\x2\x2\x2\x479\x47B\a\n\x2\x2\x47A\x46F\x3\x2\x2"+
		"\x2\x47A\x479\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B\x47C\x3\x2\x2\x2"+
		"\x47C\x47D\a\a\x2\x2\x47D\x4A7\x3\x2\x2\x2\x47E\x47F\a\x6\x2\x2\x47F\x480"+
		"\x5P)\x2\x480\x481\a\a\x2\x2\x481\x4A7\x3\x2\x2\x2\x482\x483\a.\x2\x2"+
		"\x483\x484\a\x6\x2\x2\x484\x485\x5P)\x2\x485\x486\a$\x2\x2\x486\x487\x5"+
		"J&\x2\x487\x488\a\a\x2\x2\x488\x4A7\x3\x2\x2\x2\x489\x48B\ai\x2\x2\x48A"+
		"\x489\x3\x2\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48E"+
		"\aI\x2\x2\x48D\x48A\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2\x48E\x48F\x3\x2"+
		"\x2\x2\x48F\x490\a\x6\x2\x2\x490\x491\x5> \x2\x491\x492\a\a\x2\x2\x492"+
		"\x4A7\x3\x2\x2\x2\x493\x495\a-\x2\x2\x494\x496\x5P)\x2\x495\x494\x3\x2"+
		"\x2\x2\x495\x496\x3\x2\x2\x2\x496\x49C\x3\x2\x2\x2\x497\x498\a\x94\x2"+
		"\x2\x498\x499\x5P)\x2\x499\x49A\a\x88\x2\x2\x49A\x49B\x5P)\x2\x49B\x49D"+
		"\x3\x2\x2\x2\x49C\x497\x3\x2\x2\x2\x49D\x49E\x3\x2\x2\x2\x49E\x49C\x3"+
		"\x2\x2\x2\x49E\x49F\x3\x2\x2\x2\x49F\x4A2\x3\x2\x2\x2\x4A0\x4A1\a\x44"+
		"\x2\x2\x4A1\x4A3\x5P)\x2\x4A2\x4A0\x3\x2\x2\x2\x4A2\x4A3\x3\x2\x2\x2\x4A3"+
		"\x4A4\x3\x2\x2\x2\x4A4\x4A5\a\x45\x2\x2\x4A5\x4A7\x3\x2\x2\x2\x4A6\x45B"+
		"\x3\x2\x2\x2\x4A6\x45D\x3\x2\x2\x2\x4A6\x466\x3\x2\x2\x2\x4A6\x469\x3"+
		"\x2\x2\x2\x4A6\x46C\x3\x2\x2\x2\x4A6\x47E\x3\x2\x2\x2\x4A6\x482\x3\x2"+
		"\x2\x2\x4A6\x48D\x3\x2\x2\x2\x4A6\x493\x3\x2\x2\x2\x4A7\x4FC\x3\x2\x2"+
		"\x2\x4A8\x4A9\f\x14\x2\x2\x4A9\x4AA\a\xE\x2\x2\x4AA\x4FB\x5P)\x15\x4AB"+
		"\x4AC\f\x13\x2\x2\x4AC\x4AD\t\t\x2\x2\x4AD\x4FB\x5P)\x14\x4AE\x4AF\f\x12"+
		"\x2\x2\x4AF\x4B0\t\n\x2\x2\x4B0\x4FB\x5P)\x13\x4B1\x4B2\f\x11\x2\x2\x4B2"+
		"\x4B3\t\v\x2\x2\x4B3\x4FB\x5P)\x12\x4B4\x4B5\f\x10\x2\x2\x4B5\x4B6\t\f"+
		"\x2\x2\x4B6\x4FB\x5P)\x11\x4B7\x4B8\f\xF\x2\x2\x4B8\x4B9\t\r\x2\x2\x4B9"+
		"\x4FB\x5P)\x10\x4BA\x4BB\f\xE\x2\x2\x4BB\x4BC\a#\x2\x2\x4BC\x4FB\x5P)"+
		"\xF\x4BD\x4BE\f\r\x2\x2\x4BE\x4BF\ao\x2\x2\x4BF\x4FB\x5P)\xE\x4C0\x4C1"+
		"\f\a\x2\x2\x4C1\x4C3\a_\x2\x2\x4C2\x4C4\ai\x2\x2\x4C3\x4C2\x3\x2\x2\x2"+
		"\x4C3\x4C4\x3\x2\x2\x2\x4C4\x4C5\x3\x2\x2\x2\x4C5\x4FB\x5P)\b\x4C6\x4C8"+
		"\f\x6\x2\x2\x4C7\x4C9\ai\x2\x2\x4C8\x4C7\x3\x2\x2\x2\x4C8\x4C9\x3\x2\x2"+
		"\x2\x4C9\x4CA\x3\x2\x2\x2\x4CA\x4CB\a*\x2\x2\x4CB\x4CC\x5P)\x2\x4CC\x4CD"+
		"\a#\x2\x2\x4CD\x4CE\x5P)\a\x4CE\x4FB\x3\x2\x2\x2\x4CF\x4D1\f\t\x2\x2\x4D0"+
		"\x4D2\ai\x2\x2\x4D1\x4D0\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2\x4D2\x4D3\x3"+
		"\x2\x2\x2\x4D3\x4D4\t\xE\x2\x2\x4D4\x4D7\x5P)\x2\x4D5\x4D6\a\x46\x2\x2"+
		"\x4D6\x4D8\x5P)\x2\x4D7\x4D5\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2\x2\x4D8\x4FB"+
		"\x3\x2\x2\x2\x4D9\x4DE\f\b\x2\x2\x4DA\x4DF\a`\x2\x2\x4DB\x4DF\aj\x2\x2"+
		"\x4DC\x4DD\ai\x2\x2\x4DD\x4DF\ak\x2\x2\x4DE\x4DA\x3\x2\x2\x2\x4DE\x4DB"+
		"\x3\x2\x2\x2\x4DE\x4DC\x3\x2\x2\x2\x4DF\x4FB\x3\x2\x2\x2\x4E0\x4E2\f\x5"+
		"\x2\x2\x4E1\x4E3\ai\x2\x2\x4E2\x4E1\x3\x2\x2\x2\x4E2\x4E3\x3\x2\x2\x2"+
		"\x4E3\x4E4\x3\x2\x2\x2\x4E4\x4F8\aV\x2\x2\x4E5\x4EF\a\x6\x2\x2\x4E6\x4F0"+
		"\x5> \x2\x4E7\x4EC\x5P)\x2\x4E8\x4E9\a\b\x2\x2\x4E9\x4EB\x5P)\x2\x4EA"+
		"\x4E8\x3\x2\x2\x2\x4EB\x4EE\x3\x2\x2\x2\x4EC\x4EA\x3\x2\x2\x2\x4EC\x4ED"+
		"\x3\x2\x2\x2\x4ED\x4F0\x3\x2\x2\x2\x4EE\x4EC\x3\x2\x2\x2\x4EF\x4E6\x3"+
		"\x2\x2\x2\x4EF\x4E7\x3\x2\x2\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0\x4F1\x3\x2"+
		"\x2\x2\x4F1\x4F9\a\a\x2\x2\x4F2\x4F3\x5\x86\x44\x2\x4F3\x4F4\a\x5\x2\x2"+
		"\x4F4\x4F6\x3\x2\x2\x2\x4F5\x4F2\x3\x2\x2\x2\x4F5\x4F6\x3\x2\x2\x2\x4F6"+
		"\x4F7\x3\x2\x2\x2\x4F7\x4F9\x5\x88\x45\x2\x4F8\x4E5\x3\x2\x2\x2\x4F8\x4F5"+
		"\x3\x2\x2\x2\x4F9\x4FB\x3\x2\x2\x2\x4FA\x4A8\x3\x2\x2\x2\x4FA\x4AB\x3"+
		"\x2\x2\x2\x4FA\x4AE\x3\x2\x2\x2\x4FA\x4B1\x3\x2\x2\x2\x4FA\x4B4\x3\x2"+
		"\x2\x2\x4FA\x4B7\x3\x2\x2\x2\x4FA\x4BA\x3\x2\x2\x2\x4FA\x4BD\x3\x2\x2"+
		"\x2\x4FA\x4C0\x3\x2\x2\x2\x4FA\x4C6\x3\x2\x2\x2\x4FA\x4CF\x3\x2\x2\x2"+
		"\x4FA\x4D9\x3\x2\x2\x2\x4FA\x4E0\x3\x2\x2\x2\x4FB\x4FE\x3\x2\x2\x2\x4FC"+
		"\x4FA\x3\x2\x2\x2\x4FC\x4FD\x3\x2\x2\x2\x4FDQ\x3\x2\x2\x2\x4FE\x4FC\x3"+
		"\x2\x2\x2\x4FF\x500\ax\x2\x2\x500\x50C\x5\x92J\x2\x501\x502\a\x6\x2\x2"+
		"\x502\x507\x5\x8EH\x2\x503\x504\a\b\x2\x2\x504\x506\x5\x8EH\x2\x505\x503"+
		"\x3\x2\x2\x2\x506\x509\x3\x2\x2\x2\x507\x505\x3\x2\x2\x2\x507\x508\x3"+
		"\x2\x2\x2\x508\x50A\x3\x2\x2\x2\x509\x507\x3\x2\x2\x2\x50A\x50B\a\a\x2"+
		"\x2\x50B\x50D\x3\x2\x2\x2\x50C\x501\x3\x2\x2\x2\x50C\x50D\x3\x2\x2\x2"+
		"\x50D\x520\x3\x2\x2\x2\x50E\x50F\an\x2\x2\x50F\x518\t\xF\x2\x2\x510\x511"+
		"\a\x84\x2\x2\x511\x519\ak\x2\x2\x512\x513\a\x84\x2\x2\x513\x519\a;\x2"+
		"\x2\x514\x519\a,\x2\x2\x515\x519\a~\x2\x2\x516\x517\ah\x2\x2\x517\x519"+
		"\a\x1D\x2\x2\x518\x510\x3\x2\x2\x2\x518\x512\x3\x2\x2\x2\x518\x514\x3"+
		"\x2\x2\x2\x518\x515\x3\x2\x2\x2\x518\x516\x3\x2\x2\x2\x519\x51D\x3\x2"+
		"\x2\x2\x51A\x51B\a\x66\x2\x2\x51B\x51D\x5\x82\x42\x2\x51C\x50E\x3\x2\x2"+
		"\x2\x51C\x51A\x3\x2\x2\x2\x51D\x51F\x3\x2\x2\x2\x51E\x51C\x3\x2\x2\x2"+
		"\x51F\x522\x3\x2\x2\x2\x520\x51E\x3\x2\x2\x2\x520\x521\x3\x2\x2\x2\x521"+
		"\x52D\x3\x2\x2\x2\x522\x520\x3\x2\x2\x2\x523\x525\ai\x2\x2\x524\x523\x3"+
		"\x2\x2\x2\x524\x525\x3\x2\x2\x2\x525\x526\x3\x2\x2\x2\x526\x52B\a<\x2"+
		"\x2\x527\x528\aY\x2\x2\x528\x52C\a=\x2\x2\x529\x52A\aY\x2\x2\x52A\x52C"+
		"\aU\x2\x2\x52B\x527\x3\x2\x2\x2\x52B\x529\x3\x2\x2\x2\x52B\x52C\x3\x2"+
		"\x2\x2\x52C\x52E\x3\x2\x2\x2\x52D\x524\x3\x2\x2\x2\x52D\x52E\x3\x2\x2"+
		"\x2\x52ES\x3\x2\x2\x2\x52F\x530\av\x2\x2\x530\x535\a\x6\x2\x2\x531\x536"+
		"\aT\x2\x2\x532\x533\t\x10\x2\x2\x533\x534\a\b\x2\x2\x534\x536\x5z>\x2"+
		"\x535\x531\x3\x2\x2\x2\x535\x532\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537"+
		"\x538\a\a\x2\x2\x538U\x3\x2\x2\x2\x539\x53C\x5\x8EH\x2\x53A\x53B\a\x30"+
		"\x2\x2\x53B\x53D\x5\x90I\x2\x53C\x53A\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2"+
		"\x53D\x53F\x3\x2\x2\x2\x53E\x540\t\a\x2\x2\x53F\x53E\x3\x2\x2\x2\x53F"+
		"\x540\x3\x2\x2\x2\x540W\x3\x2\x2\x2\x541\x542\a\x34\x2\x2\x542\x544\x5"+
		"\x82\x42\x2\x543\x541\x3\x2\x2\x2\x543\x544\x3\x2\x2\x2\x544\x569\x3\x2"+
		"\x2\x2\x545\x546\at\x2\x2\x546\x549\a\x62\x2\x2\x547\x549\a\x8D\x2\x2"+
		"\x548\x545\x3\x2\x2\x2\x548\x547\x3\x2\x2\x2\x549\x54A\x3\x2\x2\x2\x54A"+
		"\x54B\a\x6\x2\x2\x54B\x550\x5V,\x2\x54C\x54D\a\b\x2\x2\x54D\x54F\x5V,"+
		"\x2\x54E\x54C\x3\x2\x2\x2\x54F\x552\x3\x2\x2\x2\x550\x54E\x3\x2\x2\x2"+
		"\x550\x551\x3\x2\x2\x2\x551\x553\x3\x2\x2\x2\x552\x550\x3\x2\x2\x2\x553"+
		"\x554\a\a\x2\x2\x554\x555\x5N(\x2\x555\x56A\x3\x2\x2\x2\x556\x557\a/\x2"+
		"\x2\x557\x558\a\x6\x2\x2\x558\x559\x5P)\x2\x559\x55A\a\a\x2\x2\x55A\x56A"+
		"\x3\x2\x2\x2\x55B\x55C\aM\x2\x2\x55C\x55D\a\x62\x2\x2\x55D\x55E\a\x6\x2"+
		"\x2\x55E\x563\x5\x8EH\x2\x55F\x560\a\b\x2\x2\x560\x562\x5\x8EH\x2\x561"+
		"\x55F\x3\x2\x2\x2\x562\x565\x3\x2\x2\x2\x563\x561\x3\x2\x2\x2\x563\x564"+
		"\x3\x2\x2\x2\x564\x566\x3\x2\x2\x2\x565\x563\x3\x2\x2\x2\x566\x567\a\a"+
		"\x2\x2\x567\x568\x5R*\x2\x568\x56A\x3\x2\x2\x2\x569\x548\x3\x2\x2\x2\x569"+
		"\x556\x3\x2\x2\x2\x569\x55B\x3\x2\x2\x2\x56AY\x3\x2\x2\x2\x56B\x56D\a"+
		"\x96\x2\x2\x56C\x56E\aw\x2\x2\x56D\x56C\x3\x2\x2\x2\x56D\x56E\x3\x2\x2"+
		"\x2\x56E\x56F\x3\x2\x2\x2\x56F\x570\x5r:\x2\x570\x571\a$\x2\x2\x571\x572"+
		"\a\x6\x2\x2\x572\x573\x5> \x2\x573\x57D\a\a\x2\x2\x574\x575\a\b\x2\x2"+
		"\x575\x576\x5r:\x2\x576\x577\a$\x2\x2\x577\x578\a\x6\x2\x2\x578\x579\x5"+
		"> \x2\x579\x57A\a\a\x2\x2\x57A\x57C\x3\x2\x2\x2\x57B\x574\x3\x2\x2\x2"+
		"\x57C\x57F\x3\x2\x2\x2\x57D\x57B\x3\x2\x2\x2\x57D\x57E\x3\x2\x2\x2\x57E"+
		"[\x3\x2\x2\x2\x57F\x57D\x3\x2\x2\x2\x580\x581\x5\x86\x44\x2\x581\x582"+
		"\a\x5\x2\x2\x582\x584\x3\x2\x2\x2\x583\x580\x3\x2\x2\x2\x583\x584\x3\x2"+
		"\x2\x2\x584\x585\x3\x2\x2\x2\x585\x58B\x5\x88\x45\x2\x586\x587\aX\x2\x2"+
		"\x587\x588\a+\x2\x2\x588\x58C\x5\x94K\x2\x589\x58A\ai\x2\x2\x58A\x58C"+
		"\aX\x2\x2\x58B\x586\x3\x2\x2\x2\x58B\x589\x3\x2\x2\x2\x58B\x58C\x3\x2"+
		"\x2\x2\x58C]\x3\x2\x2\x2\x58D\x590\x5P)\x2\x58E\x58F\a\x30\x2\x2\x58F"+
		"\x591\x5\x90I\x2\x590\x58E\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591\x593"+
		"\x3\x2\x2\x2\x592\x594\t\a\x2\x2\x593\x592\x3\x2\x2\x2\x593\x594\x3\x2"+
		"\x2\x2\x594_\x3\x2\x2\x2\x595\x599\x5t;\x2\x596\x599\x5\x82\x42\x2\x597"+
		"\x599\a\x9B\x2\x2\x598\x595\x3\x2\x2\x2\x598\x596\x3\x2\x2\x2\x598\x597"+
		"\x3\x2\x2\x2\x599\x61\x3\x2\x2\x2\x59A\x5A6\x5\x88\x45\x2\x59B\x59C\a"+
		"\x6\x2\x2\x59C\x5A1\x5\x8EH\x2\x59D\x59E\a\b\x2\x2\x59E\x5A0\x5\x8EH\x2"+
		"\x59F\x59D\x3\x2\x2\x2\x5A0\x5A3\x3\x2\x2\x2\x5A1\x59F\x3\x2\x2\x2\x5A1"+
		"\x5A2\x3\x2\x2\x2\x5A2\x5A4\x3\x2\x2\x2\x5A3\x5A1\x3\x2\x2\x2\x5A4\x5A5"+
		"\a\a\x2\x2\x5A5\x5A7\x3\x2\x2\x2\x5A6\x59B\x3\x2\x2\x2\x5A6\x5A7\x3\x2"+
		"\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5A9\a$\x2\x2\x5A9\x5AA\a\x6\x2\x2\x5AA"+
		"\x5AB\x5> \x2\x5AB\x5AC\a\a\x2\x2\x5AC\x63\x3\x2\x2\x2\x5AD\x5BA\a\n\x2"+
		"\x2\x5AE\x5AF\x5\x88\x45\x2\x5AF\x5B0\a\x5\x2\x2\x5B0\x5B1\a\n\x2\x2\x5B1"+
		"\x5BA\x3\x2\x2\x2\x5B2\x5B7\x5P)\x2\x5B3\x5B5\a$\x2\x2\x5B4\x5B3\x3\x2"+
		"\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6\x5B8\x5~@\x2\x5B7"+
		"\x5B4\x3\x2\x2\x2\x5B7\x5B8\x3\x2\x2\x2\x5B8\x5BA\x3\x2\x2\x2\x5B9\x5AD"+
		"\x3\x2\x2\x2\x5B9\x5AE\x3\x2\x2\x2\x5B9\x5B2\x3\x2\x2\x2\x5BA\x65\x3\x2"+
		"\x2\x2\x5BB\x5BC\x5\x86\x44\x2\x5BC\x5BD\a\x5\x2\x2\x5BD\x5BF\x3\x2\x2"+
		"\x2\x5BE\x5BB\x3\x2\x2\x2\x5BE\x5BF\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2"+
		"\x5C0\x5C5\x5\x88\x45\x2\x5C1\x5C3\a$\x2\x2\x5C2\x5C1\x3\x2\x2\x2\x5C2"+
		"\x5C3\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2\x5C4\x5C6\x5\xA0Q\x2\x5C5\x5C2"+
		"\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5CC\x3\x2\x2\x2\x5C7\x5C8\aX"+
		"\x2\x2\x5C8\x5C9\a+\x2\x2\x5C9\x5CD\x5\x94K\x2\x5CA\x5CB\ai\x2\x2\x5CB"+
		"\x5CD\aX\x2\x2\x5CC\x5C7\x3\x2\x2\x2\x5CC\x5CA\x3\x2\x2\x2\x5CC\x5CD\x3"+
		"\x2\x2\x2\x5CD\x5EB\x3\x2\x2\x2\x5CE\x5D8\a\x6\x2\x2\x5CF\x5D4\x5\x66"+
		"\x34\x2\x5D0\x5D1\a\b\x2\x2\x5D1\x5D3\x5\x66\x34\x2\x5D2\x5D0\x3\x2\x2"+
		"\x2\x5D3\x5D6\x3\x2\x2\x2\x5D4\x5D2\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2"+
		"\x5D5\x5D9\x3\x2\x2\x2\x5D6\x5D4\x3\x2\x2\x2\x5D7\x5D9\x5h\x35\x2\x5D8"+
		"\x5CF\x3\x2\x2\x2\x5D8\x5D7\x3\x2\x2\x2\x5D9\x5DA\x3\x2\x2\x2\x5DA\x5DF"+
		"\a\a\x2\x2\x5DB\x5DD\a$\x2\x2\x5DC\x5DB\x3\x2\x2\x2\x5DC\x5DD\x3\x2\x2"+
		"\x2\x5DD\x5DE\x3\x2\x2\x2\x5DE\x5E0\x5\xA0Q\x2\x5DF\x5DC\x3\x2\x2\x2\x5DF"+
		"\x5E0\x3\x2\x2\x2\x5E0\x5EB\x3\x2\x2\x2\x5E1\x5E2\a\x6\x2\x2\x5E2\x5E3"+
		"\x5> \x2\x5E3\x5E8\a\a\x2\x2\x5E4\x5E6\a$\x2\x2\x5E5\x5E4\x3\x2\x2\x2"+
		"\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5E7\x3\x2\x2\x2\x5E7\x5E9\x5\xA0Q\x2\x5E8"+
		"\x5E5\x3\x2\x2\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9\x5EB\x3\x2\x2\x2\x5EA\x5BE"+
		"\x3\x2\x2\x2\x5EA\x5CE\x3\x2\x2\x2\x5EA\x5E1\x3\x2\x2\x2\x5EBg\x3\x2\x2"+
		"\x2\x5EC\x5F3\x5\x66\x34\x2\x5ED\x5EE\x5j\x36\x2\x5EE\x5EF\x5\x66\x34"+
		"\x2\x5EF\x5F0\x5l\x37\x2\x5F0\x5F2\x3\x2\x2\x2\x5F1\x5ED\x3\x2\x2\x2\x5F2"+
		"\x5F5\x3\x2\x2\x2\x5F3\x5F1\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4i\x3"+
		"\x2\x2\x2\x5F5\x5F3\x3\x2\x2\x2\x5F6\x604\a\b\x2\x2\x5F7\x5F9\ag\x2\x2"+
		"\x5F8\x5F7\x3\x2\x2\x2\x5F8\x5F9\x3\x2\x2\x2\x5F9\x600\x3\x2\x2\x2\x5FA"+
		"\x5FC\a\x63\x2\x2\x5FB\x5FD\aq\x2\x2\x5FC\x5FB\x3\x2\x2\x2\x5FC\x5FD\x3"+
		"\x2\x2\x2\x5FD\x601\x3\x2\x2\x2\x5FE\x601\aZ\x2\x2\x5FF\x601\a\x36\x2"+
		"\x2\x600\x5FA\x3\x2\x2\x2\x600\x5FE\x3\x2\x2\x2\x600\x5FF\x3\x2\x2\x2"+
		"\x600\x601\x3\x2\x2\x2\x601\x602\x3\x2\x2\x2\x602\x604\a\x61\x2\x2\x603"+
		"\x5F6\x3\x2\x2\x2\x603\x5F8\x3\x2\x2\x2\x604k\x3\x2\x2\x2\x605\x606\a"+
		"n\x2\x2\x606\x614\x5P)\x2\x607\x608\a\x8F\x2\x2\x608\x609\a\x6\x2\x2\x609"+
		"\x60E\x5\x8EH\x2\x60A\x60B\a\b\x2\x2\x60B\x60D\x5\x8EH\x2\x60C\x60A\x3"+
		"\x2\x2\x2\x60D\x610\x3\x2\x2\x2\x60E\x60C\x3\x2\x2\x2\x60E\x60F\x3\x2"+
		"\x2\x2\x60F\x611\x3\x2\x2\x2\x610\x60E\x3\x2\x2\x2\x611\x612\a\a\x2\x2"+
		"\x612\x614\x3\x2\x2\x2\x613\x605\x3\x2\x2\x2\x613\x607\x3\x2\x2\x2\x613"+
		"\x614\x3\x2\x2\x2\x614m\x3\x2\x2\x2\x615\x617\a\x83\x2\x2\x616\x618\t"+
		"\x6\x2\x2\x617\x616\x3\x2\x2\x2\x617\x618\x3\x2\x2\x2\x618\x619\x3\x2"+
		"\x2\x2\x619\x61E\x5\x64\x33\x2\x61A\x61B\a\b\x2\x2\x61B\x61D\x5\x64\x33"+
		"\x2\x61C\x61A\x3\x2\x2\x2\x61D\x620\x3\x2\x2\x2\x61E\x61C\x3\x2\x2\x2"+
		"\x61E\x61F\x3\x2\x2\x2\x61F\x62D\x3\x2\x2\x2\x620\x61E\x3\x2\x2\x2\x621"+
		"\x62B\aN\x2\x2\x622\x627\x5\x66\x34\x2\x623\x624\a\b\x2\x2\x624\x626\x5"+
		"\x66\x34\x2\x625\x623\x3\x2\x2\x2\x626\x629\x3\x2\x2\x2\x627\x625\x3\x2"+
		"\x2\x2\x627\x628\x3\x2\x2\x2\x628\x62C\x3\x2\x2\x2\x629\x627\x3\x2\x2"+
		"\x2\x62A\x62C\x5h\x35\x2\x62B\x622\x3\x2\x2\x2\x62B\x62A\x3\x2\x2\x2\x62C"+
		"\x62E\x3\x2\x2\x2\x62D\x621\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x631"+
		"\x3\x2\x2\x2\x62F\x630\a\x95\x2\x2\x630\x632\x5P)\x2\x631\x62F\x3\x2\x2"+
		"\x2\x631\x632\x3\x2\x2\x2\x632\x641\x3\x2\x2\x2\x633\x634\aQ\x2\x2\x634"+
		"\x635\a+\x2\x2\x635\x63A\x5P)\x2\x636\x637\a\b\x2\x2\x637\x639\x5P)\x2"+
		"\x638\x636\x3\x2\x2\x2\x639\x63C\x3\x2\x2\x2\x63A\x638\x3\x2\x2\x2\x63A"+
		"\x63B\x3\x2\x2\x2\x63B\x63F\x3\x2\x2\x2\x63C\x63A\x3\x2\x2\x2\x63D\x63E"+
		"\aR\x2\x2\x63E\x640\x5P)\x2\x63F\x63D\x3\x2\x2\x2\x63F\x640\x3\x2\x2\x2"+
		"\x640\x642\x3\x2\x2\x2\x641\x633\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642"+
		"\x660\x3\x2\x2\x2\x643\x644\a\x91\x2\x2\x644\x645\a\x6\x2\x2\x645\x64A"+
		"\x5P)\x2\x646\x647\a\b\x2\x2\x647\x649\x5P)\x2\x648\x646\x3\x2\x2\x2\x649"+
		"\x64C\x3\x2\x2\x2\x64A\x648\x3\x2\x2\x2\x64A\x64B\x3\x2\x2\x2\x64B\x64D"+
		"\x3\x2\x2\x2\x64C\x64A\x3\x2\x2\x2\x64D\x65C\a\a\x2\x2\x64E\x64F\a\b\x2"+
		"\x2\x64F\x650\a\x6\x2\x2\x650\x655\x5P)\x2\x651\x652\a\b\x2\x2\x652\x654"+
		"\x5P)\x2\x653\x651\x3\x2\x2\x2\x654\x657\x3\x2\x2\x2\x655\x653\x3\x2\x2"+
		"\x2\x655\x656\x3\x2\x2\x2\x656\x658\x3\x2\x2\x2\x657\x655\x3\x2\x2\x2"+
		"\x658\x659\a\a\x2\x2\x659\x65B\x3\x2\x2\x2\x65A\x64E\x3\x2\x2\x2\x65B"+
		"\x65E\x3\x2\x2\x2\x65C\x65A\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x660"+
		"\x3\x2\x2\x2\x65E\x65C\x3\x2\x2\x2\x65F\x615\x3\x2\x2\x2\x65F\x643\x3"+
		"\x2\x2\x2\x660o\x3\x2\x2\x2\x661\x667\a\x8C\x2\x2\x662\x663\a\x8C\x2\x2"+
		"\x663\x667\a \x2\x2\x664\x667\a]\x2\x2\x665\x667\aG\x2\x2\x666\x661\x3"+
		"\x2\x2\x2\x666\x662\x3\x2\x2\x2\x666\x664\x3\x2\x2\x2\x666\x665\x3\x2"+
		"\x2\x2\x667q\x3\x2\x2\x2\x668\x674\x5\x88\x45\x2\x669\x66A\a\x6\x2\x2"+
		"\x66A\x66F\x5\x8EH\x2\x66B\x66C\a\b\x2\x2\x66C\x66E\x5\x8EH\x2\x66D\x66B"+
		"\x3\x2\x2\x2\x66E\x671\x3\x2\x2\x2\x66F\x66D\x3\x2\x2\x2\x66F\x670\x3"+
		"\x2\x2\x2\x670\x672\x3\x2\x2\x2\x671\x66F\x3\x2\x2\x2\x672\x673\a\a\x2"+
		"\x2\x673\x675\x3\x2\x2\x2\x674\x669\x3\x2\x2\x2\x674\x675\x3\x2\x2\x2"+
		"\x675s\x3\x2\x2\x2\x676\x678\t\n\x2\x2\x677\x676\x3\x2\x2\x2\x677\x678"+
		"\x3\x2\x2\x2\x678\x679\x3\x2\x2\x2\x679\x67A\a\x99\x2\x2\x67Au\x3\x2\x2"+
		"\x2\x67B\x67C\t\x11\x2\x2\x67Cw\x3\x2\x2\x2\x67D\x67E\t\x12\x2\x2\x67E"+
		"y\x3\x2\x2\x2\x67F\x680\a\x9B\x2\x2\x680{\x3\x2\x2\x2\x681\x684\x5P)\x2"+
		"\x682\x684\x5H%\x2\x683\x681\x3\x2\x2\x2\x683\x682\x3\x2\x2\x2\x684}\x3"+
		"\x2\x2\x2\x685\x686\t\x13\x2\x2\x686\x7F\x3\x2\x2\x2\x687\x688\t\x14\x2"+
		"\x2\x688\x81\x3\x2\x2\x2\x689\x68A\x5\xA4S\x2\x68A\x83\x3\x2\x2\x2\x68B"+
		"\x68C\x5\xA4S\x2\x68C\x85\x3\x2\x2\x2\x68D\x68E\x5\xA4S\x2\x68E\x87\x3"+
		"\x2\x2\x2\x68F\x690\x5\xA4S\x2\x690\x89\x3\x2\x2\x2\x691\x692\x5\xA4S"+
		"\x2\x692\x8B\x3\x2\x2\x2\x693\x694\x5\xA4S\x2\x694\x8D\x3\x2\x2\x2\x695"+
		"\x696\x5\xA4S\x2\x696\x8F\x3\x2\x2\x2\x697\x698\x5\xA4S\x2\x698\x91\x3"+
		"\x2\x2\x2\x699\x69A\x5\xA4S\x2\x69A\x93\x3\x2\x2\x2\x69B\x69C\x5\xA4S"+
		"\x2\x69C\x95\x3\x2\x2\x2\x69D\x69E\x5\xA4S\x2\x69E\x97\x3\x2\x2\x2\x69F"+
		"\x6A0\x5\xA4S\x2\x6A0\x99\x3\x2\x2\x2\x6A1\x6A2\x5\xA4S\x2\x6A2\x9B\x3"+
		"\x2\x2\x2\x6A3\x6A4\x5\xA4S\x2\x6A4\x9D\x3\x2\x2\x2\x6A5\x6A6\x5\xA4S"+
		"\x2\x6A6\x9F\x3\x2\x2\x2\x6A7\x6A8\x5\xA4S\x2\x6A8\xA1\x3\x2\x2\x2\x6A9"+
		"\x6AA\x5\xA4S\x2\x6AA\xA3\x3\x2\x2\x2\x6AB\x6B3\a\x98\x2\x2\x6AC\x6B3"+
		"\x5\x80\x41\x2\x6AD\x6B3\a\x9B\x2\x2\x6AE\x6AF\a\x6\x2\x2\x6AF\x6B0\x5"+
		"\xA4S\x2\x6B0\x6B1\a\a\x2\x2\x6B1\x6B3\x3\x2\x2\x2\x6B2\x6AB\x3\x2\x2"+
		"\x2\x6B2\x6AC\x3\x2\x2\x2\x6B2\x6AD\x3\x2\x2\x2\x6B2\x6AE\x3\x2\x2\x2"+
		"\x6B3\xA5\x3\x2\x2\x2\xF5\xA8\xAA\xB5\xBC\xC1\xC7\xCD\xCF\xEF\xF6\xFE"+
		"\x101\x10A\x10E\x116\x11A\x11C\x121\x123\x127\x12E\x131\x136\x13A\x13F"+
		"\x148\x14B\x151\x153\x157\x15D\x162\x16D\x173\x177\x17D\x182\x18B\x192"+
		"\x198\x19C\x1A0\x1A6\x1AB\x1B2\x1BD\x1C0\x1C2\x1C8\x1CE\x1D2\x1D9\x1DF"+
		"\x1E5\x1EB\x1F0\x1FC\x201\x20C\x211\x214\x21B\x21E\x225\x22E\x231\x237"+
		"\x239\x23D\x245\x24A\x252\x257\x25F\x264\x26C\x271\x277\x27E\x281\x289"+
		"\x293\x296\x29C\x29E\x2A1\x2B4\x2BA\x2C3\x2C8\x2D1\x2DC\x2E3\x2E9\x2EF"+
		"\x2F8\x2FF\x303\x305\x309\x310\x312\x316\x319\x320\x327\x32A\x334\x337"+
		"\x33D\x33F\x343\x34A\x34D\x355\x35F\x362\x368\x36A\x36E\x375\x37E\x382"+
		"\x384\x388\x391\x396\x398\x3A1\x3AC\x3B3\x3B6\x3B9\x3C6\x3D4\x3D9\x3DC"+
		"\x3E9\x3F7\x3FC\x405\x408\x40E\x410\x416\x41B\x421\x42D\x431\x436\x43A"+
		"\x43D\x44F\x454\x459\x461\x466\x46F\x476\x47A\x48A\x48D\x495\x49E\x4A2"+
		"\x4A6\x4C3\x4C8\x4D1\x4D7\x4DE\x4E2\x4EC\x4EF\x4F5\x4F8\x4FA\x4FC\x507"+
		"\x50C\x518\x51C\x520\x524\x52B\x52D\x535\x53C\x53F\x543\x548\x550\x563"+
		"\x569\x56D\x57D\x583\x58B\x590\x593\x598\x5A1\x5A6\x5B4\x5B7\x5B9\x5BE"+
		"\x5C2\x5C5\x5CC\x5D4\x5D8\x5DC\x5DF\x5E5\x5E8\x5EA\x5F3\x5F8\x5FC\x600"+
		"\x603\x60E\x613\x617\x61E\x627\x62B\x62D\x631\x63A\x63F\x641\x64A\x655"+
		"\x65C\x65F\x666\x66F\x674\x677\x683\x6B2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace adb
